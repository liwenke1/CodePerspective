# Generated from grammer1/JavaParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,129,1760,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,1,0,3,0,250,8,0,1,0,5,
        0,253,8,0,10,0,12,0,256,9,0,1,0,5,0,259,8,0,10,0,12,0,262,9,0,1,
        0,1,0,1,0,3,0,267,8,0,1,1,5,1,270,8,1,10,1,12,1,273,9,1,1,1,1,1,
        1,1,1,1,1,2,1,2,3,2,281,8,2,1,2,1,2,1,2,3,2,286,8,2,1,2,1,2,1,3,
        5,3,291,8,3,10,3,12,3,294,9,3,1,3,1,3,1,3,1,3,1,3,3,3,301,8,3,1,
        3,3,3,304,8,3,1,4,1,4,1,4,1,4,1,4,3,4,311,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,323,8,5,1,6,1,6,3,6,327,8,6,1,7,1,7,1,
        7,3,7,332,8,7,1,7,1,7,3,7,336,8,7,1,7,1,7,3,7,340,8,7,1,7,1,7,3,
        7,344,8,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,352,8,8,10,8,12,8,355,9,8,
        1,8,1,8,1,9,5,9,360,8,9,10,9,12,9,363,9,9,1,9,1,9,1,9,5,9,368,8,
        9,10,9,12,9,371,9,9,1,9,3,9,374,8,9,1,10,1,10,1,10,5,10,379,8,10,
        10,10,12,10,382,9,10,1,11,1,11,1,11,1,11,3,11,388,8,11,1,11,1,11,
        3,11,392,8,11,1,11,3,11,395,8,11,1,11,3,11,398,8,11,1,11,1,11,1,
        12,1,12,1,12,5,12,405,8,12,10,12,12,12,408,9,12,1,13,5,13,411,8,
        13,10,13,12,13,414,9,13,1,13,1,13,3,13,418,8,13,1,13,3,13,421,8,
        13,1,14,1,14,5,14,425,8,14,10,14,12,14,428,9,14,1,15,1,15,1,15,3,
        15,433,8,15,1,15,1,15,3,15,437,8,15,1,15,1,15,1,16,1,16,5,16,443,
        8,16,10,16,12,16,446,9,16,1,16,1,16,1,17,1,17,5,17,452,8,17,10,17,
        12,17,455,9,17,1,17,1,17,1,18,1,18,3,18,461,8,18,1,18,1,18,5,18,
        465,8,18,10,18,12,18,468,9,18,1,18,3,18,471,8,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,483,8,19,1,20,1,20,1,20,
        1,20,1,20,5,20,490,8,20,10,20,12,20,493,9,20,1,20,1,20,3,20,497,
        8,20,1,20,1,20,1,21,1,21,3,21,503,8,21,1,22,1,22,3,22,507,8,22,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,519,8,25,1,
        25,1,25,1,26,1,26,1,26,1,26,1,27,5,27,528,8,27,10,27,12,27,531,9,
        27,1,27,1,27,3,27,535,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,3,28,545,8,28,1,29,1,29,1,29,1,29,5,29,551,8,29,10,29,12,29,554,
        9,29,1,29,1,29,1,30,1,30,1,30,5,30,561,8,30,10,30,12,30,564,9,30,
        1,30,1,30,1,30,1,31,5,31,570,8,31,10,31,12,31,573,9,31,1,31,1,31,
        1,32,1,32,1,32,1,32,1,32,1,32,3,32,583,8,32,1,33,5,33,586,8,33,10,
        33,12,33,589,9,33,1,33,1,33,1,33,1,34,5,34,595,8,34,10,34,12,34,
        598,9,34,1,34,1,34,1,34,1,34,1,34,5,34,605,8,34,10,34,12,34,608,
        9,34,1,34,1,34,3,34,612,8,34,1,34,1,34,1,35,1,35,1,35,5,35,619,8,
        35,10,35,12,35,622,9,35,1,36,1,36,1,36,3,36,627,8,36,1,37,1,37,1,
        37,5,37,632,8,37,10,37,12,37,635,9,37,1,38,1,38,3,38,639,8,38,1,
        39,1,39,1,39,1,39,5,39,645,8,39,10,39,12,39,648,9,39,1,39,3,39,651,
        8,39,3,39,653,8,39,1,39,1,39,1,40,1,40,3,40,659,8,40,1,40,1,40,1,
        40,3,40,664,8,40,5,40,666,8,40,10,40,12,40,669,9,40,1,41,1,41,5,
        41,673,8,41,10,41,12,41,676,9,41,1,41,1,41,1,41,3,41,681,8,41,3,
        41,683,8,41,1,42,1,42,1,42,5,42,688,8,42,10,42,12,42,691,9,42,1,
        43,1,43,3,43,695,8,43,1,43,1,43,1,43,3,43,700,8,43,1,43,3,43,703,
        8,43,3,43,705,8,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,713,8,44,10,
        44,12,44,716,9,44,1,44,1,44,1,45,1,45,1,45,5,45,723,8,45,10,45,12,
        45,726,9,45,1,45,1,45,3,45,730,8,45,1,45,3,45,733,8,45,1,46,5,46,
        736,8,46,10,46,12,46,739,9,46,1,46,1,46,1,46,1,47,5,47,745,8,47,
        10,47,12,47,748,9,47,1,47,1,47,5,47,752,8,47,10,47,12,47,755,9,47,
        1,47,1,47,1,47,1,48,1,48,1,48,5,48,763,8,48,10,48,12,48,766,9,48,
        1,49,5,49,769,8,49,10,49,12,49,772,9,49,1,49,1,49,1,49,1,50,1,50,
        1,50,5,50,780,8,50,10,50,12,50,783,9,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,792,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,5,54,
        801,8,54,10,54,12,54,804,9,54,1,54,1,54,1,54,1,55,1,55,1,55,3,55,
        812,8,55,1,55,1,55,1,55,3,55,817,8,55,1,55,3,55,820,8,55,1,56,1,
        56,1,56,5,56,825,8,56,10,56,12,56,828,9,56,1,57,1,57,1,57,1,57,1,
        58,1,58,1,58,3,58,837,8,58,1,59,1,59,1,59,1,59,5,59,843,8,59,10,
        59,12,59,846,9,59,3,59,848,8,59,1,59,3,59,851,8,59,1,59,1,59,1,60,
        1,60,1,60,1,60,1,60,1,61,1,61,5,61,862,8,61,10,61,12,61,865,9,61,
        1,61,1,61,1,62,5,62,870,8,62,10,62,12,62,873,9,62,1,62,1,62,3,62,
        877,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,885,8,63,1,63,1,63,3,
        63,889,8,63,1,63,1,63,3,63,893,8,63,1,63,1,63,3,63,897,8,63,1,63,
        1,63,3,63,901,8,63,3,63,903,8,63,1,64,1,64,3,64,907,8,64,1,65,1,
        65,1,65,1,65,3,65,913,8,65,1,66,1,66,1,67,1,67,1,67,1,68,3,68,921,
        8,68,1,68,1,68,1,68,1,68,1,69,1,69,5,69,929,8,69,10,69,12,69,932,
        9,69,1,69,1,69,1,70,1,70,5,70,938,8,70,10,70,12,70,941,9,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,3,70,950,8,70,1,70,1,70,1,70,1,70,
        1,70,1,70,3,70,958,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,3,70,972,8,70,1,71,1,71,1,72,1,72,1,72,3,72,
        979,8,72,1,72,1,72,1,72,3,72,984,8,72,1,72,1,72,1,73,1,73,3,73,990,
        8,73,1,73,1,73,1,74,1,74,1,74,5,74,997,8,74,10,74,12,74,1000,9,74,
        1,75,1,75,1,75,1,76,1,76,5,76,1007,8,76,10,76,12,76,1010,9,76,1,
        76,1,76,1,77,1,77,5,77,1016,8,77,10,77,12,77,1019,9,77,1,77,1,77,
        1,78,1,78,1,78,1,78,1,78,3,78,1028,8,78,1,79,5,79,1031,8,79,10,79,
        12,79,1034,9,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1044,
        8,79,1,80,1,80,1,81,5,81,1049,8,81,10,81,12,81,1052,9,81,1,81,1,
        81,1,81,3,81,1057,8,81,1,81,3,81,1060,8,81,1,82,1,82,1,82,1,82,1,
        82,3,82,1067,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1076,8,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,4,82,1097,8,82,11,82,12,82,1098,
        1,82,3,82,1102,8,82,1,82,3,82,1105,8,82,1,82,1,82,1,82,1,82,5,82,
        1111,8,82,10,82,12,82,1114,9,82,1,82,3,82,1117,8,82,1,82,1,82,1,
        82,1,82,5,82,1123,8,82,10,82,12,82,1126,9,82,1,82,5,82,1129,8,82,
        10,82,12,82,1132,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,
        82,1142,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1151,8,82,1,
        82,1,82,1,82,3,82,1156,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,3,82,1169,8,82,1,82,1,82,1,82,1,82,3,82,1175,8,
        82,1,83,1,83,1,83,5,83,1180,8,83,10,83,12,83,1183,9,83,1,83,1,83,
        1,83,1,83,1,83,1,84,1,84,1,84,5,84,1193,8,84,10,84,12,84,1196,9,
        84,1,85,1,85,1,85,1,86,1,86,1,86,3,86,1204,8,86,1,86,1,86,1,87,1,
        87,1,87,5,87,1211,8,87,10,87,12,87,1214,9,87,1,88,5,88,1217,8,88,
        10,88,12,88,1220,9,88,1,88,1,88,1,88,1,88,1,88,3,88,1227,8,88,1,
        88,1,88,1,88,1,88,3,88,1233,8,88,1,89,4,89,1236,8,89,11,89,12,89,
        1237,1,89,4,89,1241,8,89,11,89,12,89,1242,1,90,1,90,1,90,1,90,1,
        90,1,90,3,90,1251,8,90,1,90,1,90,1,90,3,90,1256,8,90,1,91,1,91,3,
        91,1260,8,91,1,91,1,91,3,91,1264,8,91,1,91,1,91,3,91,1268,8,91,3,
        91,1270,8,91,1,92,1,92,3,92,1274,8,92,1,93,5,93,1277,8,93,10,93,
        12,93,1280,9,93,1,93,1,93,3,93,1284,8,93,1,93,1,93,1,93,1,93,1,94,
        1,94,1,94,1,94,1,95,1,95,1,95,5,95,1297,8,95,10,95,12,95,1300,9,
        95,1,96,1,96,1,96,3,96,1305,8,96,1,96,1,96,1,96,1,96,1,96,3,96,1312,
        8,96,1,96,1,96,1,96,1,96,3,96,1318,8,96,1,96,3,96,1321,8,96,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,5,97,1330,8,97,10,97,12,97,1333,9,
        97,1,97,1,97,1,97,5,97,1338,8,97,10,97,12,97,1341,9,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1355,8,97,
        1,97,1,97,3,97,1359,8,97,1,97,1,97,1,97,3,97,1364,8,97,1,97,1,97,
        3,97,1368,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,3,97,1384,8,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,3,97,1424,8,97,1,97,1,97,1,97,1,97,
        3,97,1430,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,3,97,1443,8,97,1,97,1,97,1,97,3,97,1448,8,97,1,97,5,97,1451,
        8,97,10,97,12,97,1454,9,97,1,98,5,98,1457,8,98,10,98,12,98,1460,
        9,98,1,98,1,98,5,98,1464,8,98,10,98,12,98,1467,9,98,1,98,1,98,1,
        99,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1478,8,100,1,100,1,100,
        1,100,1,100,1,100,5,100,1485,8,100,10,100,12,100,1488,9,100,1,100,
        1,100,1,100,1,100,3,100,1494,8,100,1,100,3,100,1497,8,100,1,101,
        1,101,3,101,1501,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1519,
        8,102,3,102,1521,8,102,1,103,1,103,1,103,1,103,5,103,1527,8,103,
        10,103,12,103,1530,9,103,1,103,1,103,1,104,1,104,1,104,1,104,3,104,
        1538,8,104,1,104,1,104,1,104,1,104,1,104,3,104,1545,8,104,1,105,
        1,105,1,105,1,105,1,105,1,105,5,105,1553,8,105,10,105,12,105,1556,
        9,105,1,105,1,105,5,105,1560,8,105,10,105,12,105,1563,9,105,1,105,
        1,105,1,105,5,105,1568,8,105,10,105,12,105,1571,9,105,3,105,1573,
        8,105,1,105,1,105,1,105,5,105,1578,8,105,10,105,12,105,1581,9,105,
        1,106,1,106,5,106,1585,8,106,10,106,12,106,1588,9,106,3,106,1590,
        8,106,1,107,1,107,1,107,3,107,1595,8,107,1,107,5,107,1598,8,107,
        10,107,12,107,1601,9,107,1,107,1,107,3,107,1605,8,107,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,3,108,1614,8,108,3,108,1616,8,108,
        1,109,1,109,3,109,1620,8,109,1,109,1,109,1,109,3,109,1625,8,109,
        5,109,1627,8,109,10,109,12,109,1630,9,109,1,109,3,109,1633,8,109,
        1,110,1,110,3,110,1637,8,110,1,110,1,110,1,111,1,111,1,111,1,111,
        5,111,1645,8,111,10,111,12,111,1648,9,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,5,111,1657,8,111,10,111,12,111,1660,9,111,1,111,
        1,111,5,111,1664,8,111,10,111,12,111,1667,9,111,3,111,1669,8,111,
        1,112,1,112,3,112,1673,8,112,1,113,1,113,1,113,1,114,1,114,1,114,
        3,114,1681,8,114,1,115,1,115,1,115,3,115,1686,8,115,1,116,1,116,
        1,116,1,116,1,117,1,117,1,117,5,117,1695,8,117,10,117,12,117,1698,
        9,117,1,118,5,118,1701,8,118,10,118,12,118,1704,9,118,1,118,1,118,
        3,118,1708,8,118,1,118,5,118,1711,8,118,10,118,12,118,1714,9,118,
        1,118,1,118,5,118,1718,8,118,10,118,12,118,1721,9,118,1,119,1,119,
        1,120,1,120,1,120,1,120,5,120,1729,8,120,10,120,12,120,1732,9,120,
        1,120,1,120,1,121,1,121,1,121,3,121,1739,8,121,1,121,1,121,3,121,
        1743,8,121,3,121,1745,8,121,1,122,1,122,1,122,1,122,1,122,3,122,
        1752,8,122,1,123,1,123,3,123,1756,8,123,1,123,1,123,1,123,0,2,194,
        210,124,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,0,15,
        2,0,17,17,40,40,1,0,67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,129,
        129,1,0,100,103,1,0,90,91,2,0,104,105,109,109,1,0,102,103,2,0,88,
        89,95,96,2,0,94,94,97,97,2,0,87,87,110,120,1,0,100,101,2,0,93,93,
        121,121,8,0,3,3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,1959,0,266,
        1,0,0,0,2,271,1,0,0,0,4,278,1,0,0,0,6,303,1,0,0,0,8,310,1,0,0,0,
        10,322,1,0,0,0,12,326,1,0,0,0,14,328,1,0,0,0,16,347,1,0,0,0,18,361,
        1,0,0,0,20,375,1,0,0,0,22,383,1,0,0,0,24,401,1,0,0,0,26,412,1,0,
        0,0,28,422,1,0,0,0,30,429,1,0,0,0,32,440,1,0,0,0,34,449,1,0,0,0,
        36,470,1,0,0,0,38,482,1,0,0,0,40,484,1,0,0,0,42,502,1,0,0,0,44,506,
        1,0,0,0,46,508,1,0,0,0,48,511,1,0,0,0,50,514,1,0,0,0,52,522,1,0,
        0,0,54,534,1,0,0,0,56,544,1,0,0,0,58,546,1,0,0,0,60,557,1,0,0,0,
        62,571,1,0,0,0,64,582,1,0,0,0,66,587,1,0,0,0,68,596,1,0,0,0,70,615,
        1,0,0,0,72,623,1,0,0,0,74,628,1,0,0,0,76,638,1,0,0,0,78,640,1,0,
        0,0,80,656,1,0,0,0,82,682,1,0,0,0,84,684,1,0,0,0,86,692,1,0,0,0,
        88,708,1,0,0,0,90,732,1,0,0,0,92,737,1,0,0,0,94,746,1,0,0,0,96,759,
        1,0,0,0,98,770,1,0,0,0,100,776,1,0,0,0,102,791,1,0,0,0,104,793,1,
        0,0,0,106,795,1,0,0,0,108,802,1,0,0,0,110,811,1,0,0,0,112,821,1,
        0,0,0,114,829,1,0,0,0,116,836,1,0,0,0,118,838,1,0,0,0,120,854,1,
        0,0,0,122,859,1,0,0,0,124,876,1,0,0,0,126,902,1,0,0,0,128,906,1,
        0,0,0,130,908,1,0,0,0,132,914,1,0,0,0,134,916,1,0,0,0,136,920,1,
        0,0,0,138,926,1,0,0,0,140,971,1,0,0,0,142,973,1,0,0,0,144,975,1,
        0,0,0,146,987,1,0,0,0,148,993,1,0,0,0,150,1001,1,0,0,0,152,1004,
        1,0,0,0,154,1013,1,0,0,0,156,1027,1,0,0,0,158,1032,1,0,0,0,160,1045,
        1,0,0,0,162,1059,1,0,0,0,164,1174,1,0,0,0,166,1176,1,0,0,0,168,1189,
        1,0,0,0,170,1197,1,0,0,0,172,1200,1,0,0,0,174,1207,1,0,0,0,176,1232,
        1,0,0,0,178,1235,1,0,0,0,180,1255,1,0,0,0,182,1269,1,0,0,0,184,1273,
        1,0,0,0,186,1278,1,0,0,0,188,1289,1,0,0,0,190,1293,1,0,0,0,192,1320,
        1,0,0,0,194,1367,1,0,0,0,196,1458,1,0,0,0,198,1470,1,0,0,0,200,1496,
        1,0,0,0,202,1500,1,0,0,0,204,1520,1,0,0,0,206,1522,1,0,0,0,208,1544,
        1,0,0,0,210,1572,1,0,0,0,212,1589,1,0,0,0,214,1594,1,0,0,0,216,1615,
        1,0,0,0,218,1632,1,0,0,0,220,1634,1,0,0,0,222,1640,1,0,0,0,224,1670,
        1,0,0,0,226,1674,1,0,0,0,228,1680,1,0,0,0,230,1685,1,0,0,0,232,1687,
        1,0,0,0,234,1691,1,0,0,0,236,1702,1,0,0,0,238,1722,1,0,0,0,240,1724,
        1,0,0,0,242,1744,1,0,0,0,244,1751,1,0,0,0,246,1753,1,0,0,0,248,250,
        3,2,1,0,249,248,1,0,0,0,249,250,1,0,0,0,250,254,1,0,0,0,251,253,
        3,4,2,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,
        1,0,0,0,255,260,1,0,0,0,256,254,1,0,0,0,257,259,3,6,3,0,258,257,
        1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,267,
        1,0,0,0,262,260,1,0,0,0,263,264,3,136,68,0,264,265,5,0,0,1,265,267,
        1,0,0,0,266,249,1,0,0,0,266,263,1,0,0,0,267,1,1,0,0,0,268,270,3,
        110,55,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,
        1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,5,32,0,0,275,276,
        3,100,50,0,276,277,5,84,0,0,277,3,1,0,0,0,278,280,5,25,0,0,279,281,
        5,38,0,0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,285,
        3,100,50,0,283,284,5,86,0,0,284,286,5,104,0,0,285,283,1,0,0,0,285,
        286,1,0,0,0,286,287,1,0,0,0,287,288,5,84,0,0,288,5,1,0,0,0,289,291,
        3,10,5,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,
        1,0,0,0,293,300,1,0,0,0,294,292,1,0,0,0,295,301,3,14,7,0,296,301,
        3,22,11,0,297,301,3,30,15,0,298,301,3,120,60,0,299,301,3,144,72,
        0,300,295,1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,1,0,0,
        0,300,299,1,0,0,0,301,304,1,0,0,0,302,304,5,84,0,0,303,292,1,0,0,
        0,303,302,1,0,0,0,304,7,1,0,0,0,305,311,3,10,5,0,306,311,5,30,0,
        0,307,311,5,42,0,0,308,311,5,46,0,0,309,311,5,49,0,0,310,305,1,0,
        0,0,310,306,1,0,0,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,0,
        0,0,311,9,1,0,0,0,312,323,3,110,55,0,313,323,5,35,0,0,314,323,5,
        34,0,0,315,323,5,33,0,0,316,323,5,38,0,0,317,323,5,1,0,0,318,323,
        5,18,0,0,319,323,5,39,0,0,320,323,5,64,0,0,321,323,5,66,0,0,322,
        312,1,0,0,0,322,313,1,0,0,0,322,314,1,0,0,0,322,315,1,0,0,0,322,
        316,1,0,0,0,322,317,1,0,0,0,322,318,1,0,0,0,322,319,1,0,0,0,322,
        320,1,0,0,0,322,321,1,0,0,0,323,11,1,0,0,0,324,327,5,18,0,0,325,
        327,3,110,55,0,326,324,1,0,0,0,326,325,1,0,0,0,327,13,1,0,0,0,328,
        329,5,9,0,0,329,331,3,160,80,0,330,332,3,16,8,0,331,330,1,0,0,0,
        331,332,1,0,0,0,332,335,1,0,0,0,333,334,5,17,0,0,334,336,3,236,118,
        0,335,333,1,0,0,0,335,336,1,0,0,0,336,339,1,0,0,0,337,338,5,24,0,
        0,338,340,3,234,117,0,339,337,1,0,0,0,339,340,1,0,0,0,340,343,1,
        0,0,0,341,342,5,65,0,0,342,344,3,234,117,0,343,341,1,0,0,0,343,344,
        1,0,0,0,344,345,1,0,0,0,345,346,3,32,16,0,346,15,1,0,0,0,347,348,
        5,89,0,0,348,353,3,18,9,0,349,350,5,85,0,0,350,352,3,18,9,0,351,
        349,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,
        356,1,0,0,0,355,353,1,0,0,0,356,357,5,88,0,0,357,17,1,0,0,0,358,
        360,3,110,55,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,
        362,1,0,0,0,362,364,1,0,0,0,363,361,1,0,0,0,364,373,3,160,80,0,365,
        369,5,17,0,0,366,368,3,110,55,0,367,366,1,0,0,0,368,371,1,0,0,0,
        369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,
        372,374,3,20,10,0,373,365,1,0,0,0,373,374,1,0,0,0,374,19,1,0,0,0,
        375,380,3,236,118,0,376,377,5,106,0,0,377,379,3,236,118,0,378,376,
        1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,21,1,
        0,0,0,382,380,1,0,0,0,383,384,5,16,0,0,384,387,3,160,80,0,385,386,
        5,24,0,0,386,388,3,234,117,0,387,385,1,0,0,0,387,388,1,0,0,0,388,
        389,1,0,0,0,389,391,5,80,0,0,390,392,3,24,12,0,391,390,1,0,0,0,391,
        392,1,0,0,0,392,394,1,0,0,0,393,395,5,85,0,0,394,393,1,0,0,0,394,
        395,1,0,0,0,395,397,1,0,0,0,396,398,3,28,14,0,397,396,1,0,0,0,397,
        398,1,0,0,0,398,399,1,0,0,0,399,400,5,81,0,0,400,23,1,0,0,0,401,
        406,3,26,13,0,402,403,5,85,0,0,403,405,3,26,13,0,404,402,1,0,0,0,
        405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,25,1,0,0,0,408,
        406,1,0,0,0,409,411,3,110,55,0,410,409,1,0,0,0,411,414,1,0,0,0,412,
        410,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,
        417,3,160,80,0,416,418,3,246,123,0,417,416,1,0,0,0,417,418,1,0,0,
        0,418,420,1,0,0,0,419,421,3,32,16,0,420,419,1,0,0,0,420,421,1,0,
        0,0,421,27,1,0,0,0,422,426,5,84,0,0,423,425,3,36,18,0,424,423,1,
        0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,29,1,0,
        0,0,428,426,1,0,0,0,429,430,5,28,0,0,430,432,3,160,80,0,431,433,
        3,16,8,0,432,431,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,0,434,435,
        5,17,0,0,435,437,3,234,117,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
        438,1,0,0,0,438,439,3,34,17,0,439,31,1,0,0,0,440,444,5,80,0,0,441,
        443,3,36,18,0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,
        445,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,81,0,0,448,
        33,1,0,0,0,449,453,5,80,0,0,450,452,3,54,27,0,451,450,1,0,0,0,452,
        455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,
        453,1,0,0,0,456,457,5,81,0,0,457,35,1,0,0,0,458,471,5,84,0,0,459,
        461,5,38,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,
        471,3,154,77,0,463,465,3,8,4,0,464,463,1,0,0,0,465,468,1,0,0,0,466,
        464,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,
        471,3,38,19,0,470,458,1,0,0,0,470,460,1,0,0,0,470,466,1,0,0,0,471,
        37,1,0,0,0,472,483,3,40,20,0,473,483,3,46,23,0,474,483,3,52,26,0,
        475,483,3,50,25,0,476,483,3,48,24,0,477,483,3,30,15,0,478,483,3,
        120,60,0,479,483,3,14,7,0,480,483,3,22,11,0,481,483,3,144,72,0,482,
        472,1,0,0,0,482,473,1,0,0,0,482,474,1,0,0,0,482,475,1,0,0,0,482,
        476,1,0,0,0,482,477,1,0,0,0,482,478,1,0,0,0,482,479,1,0,0,0,482,
        480,1,0,0,0,482,481,1,0,0,0,483,39,1,0,0,0,484,485,3,44,22,0,485,
        486,3,160,80,0,486,491,3,86,43,0,487,488,5,82,0,0,488,490,5,83,0,
        0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,
        0,492,496,1,0,0,0,493,491,1,0,0,0,494,495,5,45,0,0,495,497,3,84,
        42,0,496,494,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,3,42,
        21,0,499,41,1,0,0,0,500,503,3,154,77,0,501,503,5,84,0,0,502,500,
        1,0,0,0,502,501,1,0,0,0,503,43,1,0,0,0,504,507,3,236,118,0,505,507,
        5,48,0,0,506,504,1,0,0,0,506,505,1,0,0,0,507,45,1,0,0,0,508,509,
        3,16,8,0,509,510,3,40,20,0,510,47,1,0,0,0,511,512,3,16,8,0,512,513,
        3,50,25,0,513,49,1,0,0,0,514,515,3,160,80,0,515,518,3,86,43,0,516,
        517,5,45,0,0,517,519,3,84,42,0,518,516,1,0,0,0,518,519,1,0,0,0,519,
        520,1,0,0,0,520,521,3,154,77,0,521,51,1,0,0,0,522,523,3,236,118,
        0,523,524,3,70,35,0,524,525,5,84,0,0,525,53,1,0,0,0,526,528,3,8,
        4,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,
        0,0,530,532,1,0,0,0,531,529,1,0,0,0,532,535,3,56,28,0,533,535,5,
        84,0,0,534,529,1,0,0,0,534,533,1,0,0,0,535,55,1,0,0,0,536,545,3,
        58,29,0,537,545,3,62,31,0,538,545,3,66,33,0,539,545,3,30,15,0,540,
        545,3,120,60,0,541,545,3,14,7,0,542,545,3,22,11,0,543,545,3,144,
        72,0,544,536,1,0,0,0,544,537,1,0,0,0,544,538,1,0,0,0,544,539,1,0,
        0,0,544,540,1,0,0,0,544,541,1,0,0,0,544,542,1,0,0,0,544,543,1,0,
        0,0,545,57,1,0,0,0,546,547,3,236,118,0,547,552,3,60,30,0,548,549,
        5,85,0,0,549,551,3,60,30,0,550,548,1,0,0,0,551,554,1,0,0,0,552,550,
        1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,556,
        5,84,0,0,556,59,1,0,0,0,557,562,3,160,80,0,558,559,5,82,0,0,559,
        561,5,83,0,0,560,558,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,
        563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,566,5,87,0,0,566,
        567,3,76,38,0,567,61,1,0,0,0,568,570,3,64,32,0,569,568,1,0,0,0,570,
        573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,
        571,1,0,0,0,574,575,3,68,34,0,575,63,1,0,0,0,576,583,3,110,55,0,
        577,583,5,35,0,0,578,583,5,1,0,0,579,583,5,12,0,0,580,583,5,38,0,
        0,581,583,5,39,0,0,582,576,1,0,0,0,582,577,1,0,0,0,582,578,1,0,0,
        0,582,579,1,0,0,0,582,580,1,0,0,0,582,581,1,0,0,0,583,65,1,0,0,0,
        584,586,3,64,32,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,
        0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,0,0,0,590,591,3,16,8,
        0,591,592,3,68,34,0,592,67,1,0,0,0,593,595,3,110,55,0,594,593,1,
        0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,599,1,
        0,0,0,598,596,1,0,0,0,599,600,3,44,22,0,600,601,3,160,80,0,601,606,
        3,86,43,0,602,603,5,82,0,0,603,605,5,83,0,0,604,602,1,0,0,0,605,
        608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,611,1,0,0,0,608,
        606,1,0,0,0,609,610,5,45,0,0,610,612,3,84,42,0,611,609,1,0,0,0,611,
        612,1,0,0,0,612,613,1,0,0,0,613,614,3,42,21,0,614,69,1,0,0,0,615,
        620,3,72,36,0,616,617,5,85,0,0,617,619,3,72,36,0,618,616,1,0,0,0,
        619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,71,1,0,0,0,622,
        620,1,0,0,0,623,626,3,74,37,0,624,625,5,87,0,0,625,627,3,76,38,0,
        626,624,1,0,0,0,626,627,1,0,0,0,627,73,1,0,0,0,628,633,3,160,80,
        0,629,630,5,82,0,0,630,632,5,83,0,0,631,629,1,0,0,0,632,635,1,0,
        0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,75,1,0,0,0,635,633,1,0,0,
        0,636,639,3,78,39,0,637,639,3,194,97,0,638,636,1,0,0,0,638,637,1,
        0,0,0,639,77,1,0,0,0,640,652,5,80,0,0,641,646,3,76,38,0,642,643,
        5,85,0,0,643,645,3,76,38,0,644,642,1,0,0,0,645,648,1,0,0,0,646,644,
        1,0,0,0,646,647,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,649,651,
        5,85,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,641,
        1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,5,81,0,0,655,79,
        1,0,0,0,656,658,3,160,80,0,657,659,3,240,120,0,658,657,1,0,0,0,658,
        659,1,0,0,0,659,667,1,0,0,0,660,661,5,86,0,0,661,663,3,160,80,0,
        662,664,3,240,120,0,663,662,1,0,0,0,663,664,1,0,0,0,664,666,1,0,
        0,0,665,660,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,
        0,0,668,81,1,0,0,0,669,667,1,0,0,0,670,683,3,236,118,0,671,673,3,
        110,55,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,
        1,0,0,0,675,677,1,0,0,0,676,674,1,0,0,0,677,680,5,92,0,0,678,679,
        7,0,0,0,679,681,3,236,118,0,680,678,1,0,0,0,680,681,1,0,0,0,681,
        683,1,0,0,0,682,670,1,0,0,0,682,674,1,0,0,0,683,83,1,0,0,0,684,689,
        3,100,50,0,685,686,5,85,0,0,686,688,3,100,50,0,687,685,1,0,0,0,688,
        691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,85,1,0,0,0,691,689,
        1,0,0,0,692,704,5,78,0,0,693,695,3,88,44,0,694,693,1,0,0,0,694,695,
        1,0,0,0,695,705,1,0,0,0,696,699,3,88,44,0,697,698,5,85,0,0,698,700,
        3,90,45,0,699,697,1,0,0,0,699,700,1,0,0,0,700,705,1,0,0,0,701,703,
        3,90,45,0,702,701,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,694,
        1,0,0,0,704,696,1,0,0,0,704,702,1,0,0,0,705,706,1,0,0,0,706,707,
        5,79,0,0,707,87,1,0,0,0,708,714,3,236,118,0,709,710,3,160,80,0,710,
        711,5,86,0,0,711,713,1,0,0,0,712,709,1,0,0,0,713,716,1,0,0,0,714,
        712,1,0,0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,
        718,5,43,0,0,718,89,1,0,0,0,719,724,3,92,46,0,720,721,5,85,0,0,721,
        723,3,92,46,0,722,720,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,
        725,1,0,0,0,725,729,1,0,0,0,726,724,1,0,0,0,727,728,5,85,0,0,728,
        730,3,94,47,0,729,727,1,0,0,0,729,730,1,0,0,0,730,733,1,0,0,0,731,
        733,3,94,47,0,732,719,1,0,0,0,732,731,1,0,0,0,733,91,1,0,0,0,734,
        736,3,12,6,0,735,734,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,
        738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,741,3,236,118,0,
        741,742,3,74,37,0,742,93,1,0,0,0,743,745,3,12,6,0,744,743,1,0,0,
        0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,
        0,748,746,1,0,0,0,749,753,3,236,118,0,750,752,3,110,55,0,751,750,
        1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,
        1,0,0,0,755,753,1,0,0,0,756,757,5,124,0,0,757,758,3,74,37,0,758,
        95,1,0,0,0,759,764,3,98,49,0,760,761,5,85,0,0,761,763,3,98,49,0,
        762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,
        765,97,1,0,0,0,766,764,1,0,0,0,767,769,3,12,6,0,768,767,1,0,0,0,
        769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,
        772,770,1,0,0,0,773,774,5,61,0,0,774,775,3,160,80,0,775,99,1,0,0,
        0,776,781,3,160,80,0,777,778,5,86,0,0,778,780,3,160,80,0,779,777,
        1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,101,
        1,0,0,0,783,781,1,0,0,0,784,792,3,104,52,0,785,792,3,106,53,0,786,
        792,5,74,0,0,787,792,5,75,0,0,788,792,5,73,0,0,789,792,5,77,0,0,
        790,792,5,76,0,0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,1,0,0,0,
        791,787,1,0,0,0,791,788,1,0,0,0,791,789,1,0,0,0,791,790,1,0,0,0,
        792,103,1,0,0,0,793,794,7,1,0,0,794,105,1,0,0,0,795,796,7,2,0,0,
        796,107,1,0,0,0,797,798,3,160,80,0,798,799,5,86,0,0,799,801,1,0,
        0,0,800,797,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,
        0,0,803,805,1,0,0,0,804,802,1,0,0,0,805,806,5,123,0,0,806,807,3,
        160,80,0,807,109,1,0,0,0,808,809,5,123,0,0,809,812,3,100,50,0,810,
        812,3,108,54,0,811,808,1,0,0,0,811,810,1,0,0,0,812,819,1,0,0,0,813,
        816,5,78,0,0,814,817,3,112,56,0,815,817,3,116,58,0,816,814,1,0,0,
        0,816,815,1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,820,5,79,0,
        0,819,813,1,0,0,0,819,820,1,0,0,0,820,111,1,0,0,0,821,826,3,114,
        57,0,822,823,5,85,0,0,823,825,3,114,57,0,824,822,1,0,0,0,825,828,
        1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,827,113,1,0,0,0,828,826,
        1,0,0,0,829,830,3,160,80,0,830,831,5,87,0,0,831,832,3,116,58,0,832,
        115,1,0,0,0,833,837,3,194,97,0,834,837,3,110,55,0,835,837,3,118,
        59,0,836,833,1,0,0,0,836,834,1,0,0,0,836,835,1,0,0,0,837,117,1,0,
        0,0,838,847,5,80,0,0,839,844,3,116,58,0,840,841,5,85,0,0,841,843,
        3,116,58,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,
        1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,847,839,1,0,0,0,847,848,
        1,0,0,0,848,850,1,0,0,0,849,851,5,85,0,0,850,849,1,0,0,0,850,851,
        1,0,0,0,851,852,1,0,0,0,852,853,5,81,0,0,853,119,1,0,0,0,854,855,
        5,123,0,0,855,856,5,28,0,0,856,857,3,160,80,0,857,858,3,122,61,0,
        858,121,1,0,0,0,859,863,5,80,0,0,860,862,3,124,62,0,861,860,1,0,
        0,0,862,865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,866,1,0,
        0,0,865,863,1,0,0,0,866,867,5,81,0,0,867,123,1,0,0,0,868,870,3,8,
        4,0,869,868,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,
        0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,877,3,126,63,0,875,877,5,
        84,0,0,876,871,1,0,0,0,876,875,1,0,0,0,877,125,1,0,0,0,878,879,3,
        236,118,0,879,880,3,128,64,0,880,881,5,84,0,0,881,903,1,0,0,0,882,
        884,3,14,7,0,883,885,5,84,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,
        903,1,0,0,0,886,888,3,30,15,0,887,889,5,84,0,0,888,887,1,0,0,0,888,
        889,1,0,0,0,889,903,1,0,0,0,890,892,3,22,11,0,891,893,5,84,0,0,892,
        891,1,0,0,0,892,893,1,0,0,0,893,903,1,0,0,0,894,896,3,120,60,0,895,
        897,5,84,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,903,1,0,0,0,898,
        900,3,144,72,0,899,901,5,84,0,0,900,899,1,0,0,0,900,901,1,0,0,0,
        901,903,1,0,0,0,902,878,1,0,0,0,902,882,1,0,0,0,902,886,1,0,0,0,
        902,890,1,0,0,0,902,894,1,0,0,0,902,898,1,0,0,0,903,127,1,0,0,0,
        904,907,3,130,65,0,905,907,3,132,66,0,906,904,1,0,0,0,906,905,1,
        0,0,0,907,129,1,0,0,0,908,909,3,160,80,0,909,910,5,78,0,0,910,912,
        5,79,0,0,911,913,3,134,67,0,912,911,1,0,0,0,912,913,1,0,0,0,913,
        131,1,0,0,0,914,915,3,70,35,0,915,133,1,0,0,0,916,917,5,12,0,0,917,
        918,3,116,58,0,918,135,1,0,0,0,919,921,5,52,0,0,920,919,1,0,0,0,
        920,921,1,0,0,0,921,922,1,0,0,0,922,923,5,51,0,0,923,924,3,100,50,
        0,924,925,3,138,69,0,925,137,1,0,0,0,926,930,5,80,0,0,927,929,3,
        140,70,0,928,927,1,0,0,0,929,932,1,0,0,0,930,928,1,0,0,0,930,931,
        1,0,0,0,931,933,1,0,0,0,932,930,1,0,0,0,933,934,5,81,0,0,934,139,
        1,0,0,0,935,939,5,53,0,0,936,938,3,142,71,0,937,936,1,0,0,0,938,
        941,1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,
        939,1,0,0,0,942,943,3,100,50,0,943,944,5,84,0,0,944,972,1,0,0,0,
        945,946,5,54,0,0,946,949,3,100,50,0,947,948,5,56,0,0,948,950,3,100,
        50,0,949,947,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,84,
        0,0,952,972,1,0,0,0,953,954,5,55,0,0,954,957,3,100,50,0,955,956,
        5,56,0,0,956,958,3,100,50,0,957,955,1,0,0,0,957,958,1,0,0,0,958,
        959,1,0,0,0,959,960,5,84,0,0,960,972,1,0,0,0,961,962,5,57,0,0,962,
        963,3,100,50,0,963,964,5,84,0,0,964,972,1,0,0,0,965,966,5,58,0,0,
        966,967,3,100,50,0,967,968,5,59,0,0,968,969,3,100,50,0,969,970,5,
        84,0,0,970,972,1,0,0,0,971,935,1,0,0,0,971,945,1,0,0,0,971,953,1,
        0,0,0,971,961,1,0,0,0,971,965,1,0,0,0,972,141,1,0,0,0,973,974,7,
        3,0,0,974,143,1,0,0,0,975,976,5,63,0,0,976,978,3,160,80,0,977,979,
        3,16,8,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,983,
        3,146,73,0,981,982,5,24,0,0,982,984,3,234,117,0,983,981,1,0,0,0,
        983,984,1,0,0,0,984,985,1,0,0,0,985,986,3,152,76,0,986,145,1,0,0,
        0,987,989,5,78,0,0,988,990,3,148,74,0,989,988,1,0,0,0,989,990,1,
        0,0,0,990,991,1,0,0,0,991,992,5,79,0,0,992,147,1,0,0,0,993,998,3,
        150,75,0,994,995,5,85,0,0,995,997,3,150,75,0,996,994,1,0,0,0,997,
        1000,1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,999,149,1,0,0,0,1000,
        998,1,0,0,0,1001,1002,3,236,118,0,1002,1003,3,160,80,0,1003,151,
        1,0,0,0,1004,1008,5,80,0,0,1005,1007,3,36,18,0,1006,1005,1,0,0,0,
        1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,
        1,0,0,0,1010,1008,1,0,0,0,1011,1012,5,81,0,0,1012,153,1,0,0,0,1013,
        1017,5,80,0,0,1014,1016,3,156,78,0,1015,1014,1,0,0,0,1016,1019,1,
        0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,
        1017,1,0,0,0,1020,1021,5,81,0,0,1021,155,1,0,0,0,1022,1023,3,158,
        79,0,1023,1024,5,84,0,0,1024,1028,1,0,0,0,1025,1028,3,164,82,0,1026,
        1028,3,162,81,0,1027,1022,1,0,0,0,1027,1025,1,0,0,0,1027,1026,1,
        0,0,0,1028,157,1,0,0,0,1029,1031,3,12,6,0,1030,1029,1,0,0,0,1031,
        1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,1043,1,0,0,
        0,1034,1032,1,0,0,0,1035,1036,3,236,118,0,1036,1037,3,70,35,0,1037,
        1044,1,0,0,0,1038,1039,5,61,0,0,1039,1040,3,160,80,0,1040,1041,5,
        87,0,0,1041,1042,3,194,97,0,1042,1044,1,0,0,0,1043,1035,1,0,0,0,
        1043,1038,1,0,0,0,1044,159,1,0,0,0,1045,1046,7,4,0,0,1046,161,1,
        0,0,0,1047,1049,3,10,5,0,1048,1047,1,0,0,0,1049,1052,1,0,0,0,1050,
        1048,1,0,0,0,1050,1051,1,0,0,0,1051,1056,1,0,0,0,1052,1050,1,0,0,
        0,1053,1057,3,14,7,0,1054,1057,3,30,15,0,1055,1057,3,144,72,0,1056,
        1053,1,0,0,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,1060,1,0,0,
        0,1058,1060,5,84,0,0,1059,1050,1,0,0,0,1059,1058,1,0,0,0,1060,163,
        1,0,0,0,1061,1175,3,154,77,0,1062,1063,5,2,0,0,1063,1066,3,194,97,
        0,1064,1065,5,93,0,0,1065,1067,3,194,97,0,1066,1064,1,0,0,0,1066,
        1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,84,0,0,1069,1175,1,0,
        0,0,1070,1071,5,22,0,0,1071,1072,3,188,94,0,1072,1075,3,164,82,0,
        1073,1074,5,15,0,0,1074,1076,3,164,82,0,1075,1073,1,0,0,0,1075,1076,
        1,0,0,0,1076,1175,1,0,0,0,1077,1078,5,21,0,0,1078,1079,5,78,0,0,
        1079,1080,3,182,91,0,1080,1081,5,79,0,0,1081,1082,3,164,82,0,1082,
        1175,1,0,0,0,1083,1084,5,50,0,0,1084,1085,3,188,94,0,1085,1086,3,
        164,82,0,1086,1175,1,0,0,0,1087,1088,5,13,0,0,1088,1089,3,164,82,
        0,1089,1090,5,50,0,0,1090,1091,3,188,94,0,1091,1092,5,84,0,0,1092,
        1175,1,0,0,0,1093,1094,5,47,0,0,1094,1104,3,154,77,0,1095,1097,3,
        166,83,0,1096,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1096,1,0,0,0,1098,
        1099,1,0,0,0,1099,1101,1,0,0,0,1100,1102,3,170,85,0,1101,1100,1,
        0,0,0,1101,1102,1,0,0,0,1102,1105,1,0,0,0,1103,1105,3,170,85,0,1104,
        1096,1,0,0,0,1104,1103,1,0,0,0,1105,1175,1,0,0,0,1106,1107,5,47,
        0,0,1107,1108,3,172,86,0,1108,1112,3,154,77,0,1109,1111,3,166,83,
        0,1110,1109,1,0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,0,0,1112,1113,
        1,0,0,0,1113,1116,1,0,0,0,1114,1112,1,0,0,0,1115,1117,3,170,85,0,
        1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1175,1,0,0,0,1118,1119,
        5,41,0,0,1119,1120,3,188,94,0,1120,1124,5,80,0,0,1121,1123,3,178,
        89,0,1122,1121,1,0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1124,
        1125,1,0,0,0,1125,1130,1,0,0,0,1126,1124,1,0,0,0,1127,1129,3,180,
        90,0,1128,1127,1,0,0,0,1129,1132,1,0,0,0,1130,1128,1,0,0,0,1130,
        1131,1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,1134,5,81,
        0,0,1134,1175,1,0,0,0,1135,1136,5,42,0,0,1136,1137,3,188,94,0,1137,
        1138,3,154,77,0,1138,1175,1,0,0,0,1139,1141,5,36,0,0,1140,1142,3,
        194,97,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,
        1175,5,84,0,0,1144,1145,5,44,0,0,1145,1146,3,194,97,0,1146,1147,
        5,84,0,0,1147,1175,1,0,0,0,1148,1150,5,4,0,0,1149,1151,3,160,80,
        0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1175,
        5,84,0,0,1153,1155,5,11,0,0,1154,1156,3,160,80,0,1155,1154,1,0,0,
        0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1175,5,84,0,0,1158,1159,
        5,62,0,0,1159,1160,3,194,97,0,1160,1161,5,84,0,0,1161,1175,1,0,0,
        0,1162,1175,5,84,0,0,1163,1164,3,194,97,0,1164,1165,5,84,0,0,1165,
        1175,1,0,0,0,1166,1168,3,206,103,0,1167,1169,5,84,0,0,1168,1167,
        1,0,0,0,1168,1169,1,0,0,0,1169,1175,1,0,0,0,1170,1171,3,160,80,0,
        1171,1172,5,93,0,0,1172,1173,3,164,82,0,1173,1175,1,0,0,0,1174,1061,
        1,0,0,0,1174,1062,1,0,0,0,1174,1070,1,0,0,0,1174,1077,1,0,0,0,1174,
        1083,1,0,0,0,1174,1087,1,0,0,0,1174,1093,1,0,0,0,1174,1106,1,0,0,
        0,1174,1118,1,0,0,0,1174,1135,1,0,0,0,1174,1139,1,0,0,0,1174,1144,
        1,0,0,0,1174,1148,1,0,0,0,1174,1153,1,0,0,0,1174,1158,1,0,0,0,1174,
        1162,1,0,0,0,1174,1163,1,0,0,0,1174,1166,1,0,0,0,1174,1170,1,0,0,
        0,1175,165,1,0,0,0,1176,1177,5,7,0,0,1177,1181,5,78,0,0,1178,1180,
        3,12,6,0,1179,1178,1,0,0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1181,
        1182,1,0,0,0,1182,1184,1,0,0,0,1183,1181,1,0,0,0,1184,1185,3,168,
        84,0,1185,1186,3,160,80,0,1186,1187,5,79,0,0,1187,1188,3,154,77,
        0,1188,167,1,0,0,0,1189,1194,3,100,50,0,1190,1191,5,107,0,0,1191,
        1193,3,100,50,0,1192,1190,1,0,0,0,1193,1196,1,0,0,0,1194,1192,1,
        0,0,0,1194,1195,1,0,0,0,1195,169,1,0,0,0,1196,1194,1,0,0,0,1197,
        1198,5,19,0,0,1198,1199,3,154,77,0,1199,171,1,0,0,0,1200,1201,5,
        78,0,0,1201,1203,3,174,87,0,1202,1204,5,84,0,0,1203,1202,1,0,0,0,
        1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,5,79,0,0,1206,173,
        1,0,0,0,1207,1212,3,176,88,0,1208,1209,5,84,0,0,1209,1211,3,176,
        88,0,1210,1208,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1212,
        1213,1,0,0,0,1213,175,1,0,0,0,1214,1212,1,0,0,0,1215,1217,3,12,6,
        0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,
        1,0,0,0,1219,1226,1,0,0,0,1220,1218,1,0,0,0,1221,1222,3,80,40,0,
        1222,1223,3,74,37,0,1223,1227,1,0,0,0,1224,1225,5,61,0,0,1225,1227,
        3,160,80,0,1226,1221,1,0,0,0,1226,1224,1,0,0,0,1227,1228,1,0,0,0,
        1228,1229,5,87,0,0,1229,1230,3,194,97,0,1230,1233,1,0,0,0,1231,1233,
        3,160,80,0,1232,1218,1,0,0,0,1232,1231,1,0,0,0,1233,177,1,0,0,0,
        1234,1236,3,180,90,0,1235,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1235,
        1,0,0,0,1237,1238,1,0,0,0,1238,1240,1,0,0,0,1239,1241,3,156,78,0,
        1240,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1240,1,0,0,0,1242,1243,
        1,0,0,0,1243,179,1,0,0,0,1244,1250,5,6,0,0,1245,1251,3,194,97,0,
        1246,1251,5,129,0,0,1247,1248,3,236,118,0,1248,1249,3,160,80,0,1249,
        1251,1,0,0,0,1250,1245,1,0,0,0,1250,1246,1,0,0,0,1250,1247,1,0,0,
        0,1251,1252,1,0,0,0,1252,1256,5,93,0,0,1253,1254,5,12,0,0,1254,1256,
        5,93,0,0,1255,1244,1,0,0,0,1255,1253,1,0,0,0,1256,181,1,0,0,0,1257,
        1270,3,186,93,0,1258,1260,3,184,92,0,1259,1258,1,0,0,0,1259,1260,
        1,0,0,0,1260,1261,1,0,0,0,1261,1263,5,84,0,0,1262,1264,3,194,97,
        0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1267,
        5,84,0,0,1266,1268,3,190,95,0,1267,1266,1,0,0,0,1267,1268,1,0,0,
        0,1268,1270,1,0,0,0,1269,1257,1,0,0,0,1269,1259,1,0,0,0,1270,183,
        1,0,0,0,1271,1274,3,158,79,0,1272,1274,3,190,95,0,1273,1271,1,0,
        0,0,1273,1272,1,0,0,0,1274,185,1,0,0,0,1275,1277,3,12,6,0,1276,1275,
        1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,
        1283,1,0,0,0,1280,1278,1,0,0,0,1281,1284,3,236,118,0,1282,1284,5,
        61,0,0,1283,1281,1,0,0,0,1283,1282,1,0,0,0,1284,1285,1,0,0,0,1285,
        1286,3,74,37,0,1286,1287,5,93,0,0,1287,1288,3,194,97,0,1288,187,
        1,0,0,0,1289,1290,5,78,0,0,1290,1291,3,194,97,0,1291,1292,5,79,0,
        0,1292,189,1,0,0,0,1293,1298,3,194,97,0,1294,1295,5,85,0,0,1295,
        1297,3,194,97,0,1296,1294,1,0,0,0,1297,1300,1,0,0,0,1298,1296,1,
        0,0,0,1298,1299,1,0,0,0,1299,191,1,0,0,0,1300,1298,1,0,0,0,1301,
        1302,3,160,80,0,1302,1304,5,78,0,0,1303,1305,3,190,95,0,1304,1303,
        1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,5,79,0,0,1307,
        1321,1,0,0,0,1308,1309,5,43,0,0,1309,1311,5,78,0,0,1310,1312,3,190,
        95,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,
        1321,5,79,0,0,1314,1315,5,40,0,0,1315,1317,5,78,0,0,1316,1318,3,
        190,95,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,
        1321,5,79,0,0,1320,1301,1,0,0,0,1320,1308,1,0,0,0,1320,1314,1,0,
        0,0,1321,193,1,0,0,0,1322,1323,6,97,-1,0,1323,1368,3,204,102,0,1324,
        1368,3,192,96,0,1325,1326,5,31,0,0,1326,1368,3,216,108,0,1327,1331,
        5,78,0,0,1328,1330,3,110,55,0,1329,1328,1,0,0,0,1330,1333,1,0,0,
        0,1331,1329,1,0,0,0,1331,1332,1,0,0,0,1332,1334,1,0,0,0,1333,1331,
        1,0,0,0,1334,1339,3,236,118,0,1335,1336,5,106,0,0,1336,1338,3,236,
        118,0,1337,1335,1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,
        1340,1,0,0,0,1340,1342,1,0,0,0,1341,1339,1,0,0,0,1342,1343,5,79,
        0,0,1343,1344,3,194,97,22,1344,1368,1,0,0,0,1345,1346,7,5,0,0,1346,
        1368,3,194,97,20,1347,1348,7,6,0,0,1348,1368,3,194,97,19,1349,1368,
        3,198,99,0,1350,1368,3,206,103,0,1351,1352,3,236,118,0,1352,1358,
        5,122,0,0,1353,1355,3,240,120,0,1354,1353,1,0,0,0,1354,1355,1,0,
        0,0,1355,1356,1,0,0,0,1356,1359,3,160,80,0,1357,1359,5,31,0,0,1358,
        1354,1,0,0,0,1358,1357,1,0,0,0,1359,1368,1,0,0,0,1360,1361,3,214,
        107,0,1361,1363,5,122,0,0,1362,1364,3,240,120,0,1363,1362,1,0,0,
        0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1366,5,31,0,0,1366,1368,
        1,0,0,0,1367,1322,1,0,0,0,1367,1324,1,0,0,0,1367,1325,1,0,0,0,1367,
        1327,1,0,0,0,1367,1345,1,0,0,0,1367,1347,1,0,0,0,1367,1349,1,0,0,
        0,1367,1350,1,0,0,0,1367,1351,1,0,0,0,1367,1360,1,0,0,0,1368,1452,
        1,0,0,0,1369,1370,10,18,0,0,1370,1371,7,7,0,0,1371,1451,3,194,97,
        19,1372,1373,10,17,0,0,1373,1374,7,8,0,0,1374,1451,3,194,97,18,1375,
        1383,10,16,0,0,1376,1377,5,89,0,0,1377,1384,5,89,0,0,1378,1379,5,
        88,0,0,1379,1380,5,88,0,0,1380,1384,5,88,0,0,1381,1382,5,88,0,0,
        1382,1384,5,88,0,0,1383,1376,1,0,0,0,1383,1378,1,0,0,0,1383,1381,
        1,0,0,0,1384,1385,1,0,0,0,1385,1451,3,194,97,17,1386,1387,10,15,
        0,0,1387,1388,7,9,0,0,1388,1451,3,194,97,16,1389,1390,10,13,0,0,
        1390,1391,7,10,0,0,1391,1451,3,194,97,14,1392,1393,10,12,0,0,1393,
        1394,5,106,0,0,1394,1451,3,194,97,13,1395,1396,10,11,0,0,1396,1397,
        5,108,0,0,1397,1451,3,194,97,12,1398,1399,10,10,0,0,1399,1400,5,
        107,0,0,1400,1451,3,194,97,11,1401,1402,10,9,0,0,1402,1403,5,98,
        0,0,1403,1451,3,194,97,10,1404,1405,10,8,0,0,1405,1406,5,99,0,0,
        1406,1451,3,194,97,9,1407,1408,10,7,0,0,1408,1409,5,92,0,0,1409,
        1410,3,194,97,0,1410,1411,5,93,0,0,1411,1412,3,194,97,7,1412,1451,
        1,0,0,0,1413,1414,10,6,0,0,1414,1415,7,11,0,0,1415,1451,3,194,97,
        6,1416,1417,10,26,0,0,1417,1429,5,86,0,0,1418,1430,3,160,80,0,1419,
        1430,3,192,96,0,1420,1430,5,43,0,0,1421,1423,5,31,0,0,1422,1424,
        3,232,116,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,
        0,1425,1430,3,220,110,0,1426,1427,5,40,0,0,1427,1430,3,242,121,0,
        1428,1430,3,226,113,0,1429,1418,1,0,0,0,1429,1419,1,0,0,0,1429,1420,
        1,0,0,0,1429,1421,1,0,0,0,1429,1426,1,0,0,0,1429,1428,1,0,0,0,1430,
        1451,1,0,0,0,1431,1432,10,25,0,0,1432,1433,5,82,0,0,1433,1434,3,
        194,97,0,1434,1435,5,83,0,0,1435,1451,1,0,0,0,1436,1437,10,21,0,
        0,1437,1451,7,12,0,0,1438,1439,10,14,0,0,1439,1442,5,26,0,0,1440,
        1443,3,236,118,0,1441,1443,3,196,98,0,1442,1440,1,0,0,0,1442,1441,
        1,0,0,0,1443,1451,1,0,0,0,1444,1445,10,3,0,0,1445,1447,5,122,0,0,
        1446,1448,3,240,120,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,1449,
        1,0,0,0,1449,1451,3,160,80,0,1450,1369,1,0,0,0,1450,1372,1,0,0,0,
        1450,1375,1,0,0,0,1450,1386,1,0,0,0,1450,1389,1,0,0,0,1450,1392,
        1,0,0,0,1450,1395,1,0,0,0,1450,1398,1,0,0,0,1450,1401,1,0,0,0,1450,
        1404,1,0,0,0,1450,1407,1,0,0,0,1450,1413,1,0,0,0,1450,1416,1,0,0,
        0,1450,1431,1,0,0,0,1450,1436,1,0,0,0,1450,1438,1,0,0,0,1450,1444,
        1,0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,
        195,1,0,0,0,1454,1452,1,0,0,0,1455,1457,3,12,6,0,1456,1455,1,0,0,
        0,1457,1460,1,0,0,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,1461,
        1,0,0,0,1460,1458,1,0,0,0,1461,1465,3,236,118,0,1462,1464,3,110,
        55,0,1463,1462,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,
        1466,1,0,0,0,1466,1468,1,0,0,0,1467,1465,1,0,0,0,1468,1469,3,160,
        80,0,1469,197,1,0,0,0,1470,1471,3,200,100,0,1471,1472,5,121,0,0,
        1472,1473,3,202,101,0,1473,199,1,0,0,0,1474,1497,3,160,80,0,1475,
        1477,5,78,0,0,1476,1478,3,90,45,0,1477,1476,1,0,0,0,1477,1478,1,
        0,0,0,1478,1479,1,0,0,0,1479,1497,5,79,0,0,1480,1481,5,78,0,0,1481,
        1486,3,160,80,0,1482,1483,5,85,0,0,1483,1485,3,160,80,0,1484,1482,
        1,0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,
        1489,1,0,0,0,1488,1486,1,0,0,0,1489,1490,5,79,0,0,1490,1497,1,0,
        0,0,1491,1493,5,78,0,0,1492,1494,3,96,48,0,1493,1492,1,0,0,0,1493,
        1494,1,0,0,0,1494,1495,1,0,0,0,1495,1497,5,79,0,0,1496,1474,1,0,
        0,0,1496,1475,1,0,0,0,1496,1480,1,0,0,0,1496,1491,1,0,0,0,1497,201,
        1,0,0,0,1498,1501,3,194,97,0,1499,1501,3,154,77,0,1500,1498,1,0,
        0,0,1500,1499,1,0,0,0,1501,203,1,0,0,0,1502,1503,5,78,0,0,1503,1504,
        3,194,97,0,1504,1505,5,79,0,0,1505,1521,1,0,0,0,1506,1521,5,43,0,
        0,1507,1521,5,40,0,0,1508,1521,3,102,51,0,1509,1521,3,160,80,0,1510,
        1511,3,44,22,0,1511,1512,5,86,0,0,1512,1513,5,9,0,0,1513,1521,1,
        0,0,0,1514,1518,3,232,116,0,1515,1519,3,244,122,0,1516,1517,5,43,
        0,0,1517,1519,3,246,123,0,1518,1515,1,0,0,0,1518,1516,1,0,0,0,1519,
        1521,1,0,0,0,1520,1502,1,0,0,0,1520,1506,1,0,0,0,1520,1507,1,0,0,
        0,1520,1508,1,0,0,0,1520,1509,1,0,0,0,1520,1510,1,0,0,0,1520,1514,
        1,0,0,0,1521,205,1,0,0,0,1522,1523,5,41,0,0,1523,1524,3,188,94,0,
        1524,1528,5,80,0,0,1525,1527,3,208,104,0,1526,1525,1,0,0,0,1527,
        1530,1,0,0,0,1528,1526,1,0,0,0,1528,1529,1,0,0,0,1529,1531,1,0,0,
        0,1530,1528,1,0,0,0,1531,1532,5,81,0,0,1532,207,1,0,0,0,1533,1537,
        5,6,0,0,1534,1538,3,190,95,0,1535,1538,5,77,0,0,1536,1538,3,210,
        105,0,1537,1534,1,0,0,0,1537,1535,1,0,0,0,1537,1536,1,0,0,0,1538,
        1539,1,0,0,0,1539,1540,7,13,0,0,1540,1545,3,212,106,0,1541,1542,
        5,12,0,0,1542,1543,7,13,0,0,1543,1545,3,212,106,0,1544,1533,1,0,
        0,0,1544,1541,1,0,0,0,1545,209,1,0,0,0,1546,1547,6,105,-1,0,1547,
        1548,5,78,0,0,1548,1549,3,210,105,0,1549,1550,5,79,0,0,1550,1573,
        1,0,0,0,1551,1553,3,12,6,0,1552,1551,1,0,0,0,1553,1556,1,0,0,0,1554,
        1552,1,0,0,0,1554,1555,1,0,0,0,1555,1557,1,0,0,0,1556,1554,1,0,0,
        0,1557,1561,3,236,118,0,1558,1560,3,110,55,0,1559,1558,1,0,0,0,1560,
        1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,1,0,0,0,1562,1564,1,0,0,
        0,1563,1561,1,0,0,0,1564,1569,3,160,80,0,1565,1566,5,98,0,0,1566,
        1568,3,194,97,0,1567,1565,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,
        0,0,0,1569,1570,1,0,0,0,1570,1573,1,0,0,0,1571,1569,1,0,0,0,1572,
        1546,1,0,0,0,1572,1554,1,0,0,0,1573,1579,1,0,0,0,1574,1575,10,1,
        0,0,1575,1576,5,98,0,0,1576,1578,3,194,97,0,1577,1574,1,0,0,0,1578,
        1581,1,0,0,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,211,1,0,0,
        0,1581,1579,1,0,0,0,1582,1590,3,154,77,0,1583,1585,3,156,78,0,1584,
        1583,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,
        0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1589,1582,1,0,0,0,1589,1586,
        1,0,0,0,1590,213,1,0,0,0,1591,1592,3,80,40,0,1592,1593,5,86,0,0,
        1593,1595,1,0,0,0,1594,1591,1,0,0,0,1594,1595,1,0,0,0,1595,1599,
        1,0,0,0,1596,1598,3,110,55,0,1597,1596,1,0,0,0,1598,1601,1,0,0,0,
        1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,1602,1,0,0,0,1601,1599,
        1,0,0,0,1602,1604,3,160,80,0,1603,1605,3,240,120,0,1604,1603,1,0,
        0,0,1604,1605,1,0,0,0,1605,215,1,0,0,0,1606,1607,3,232,116,0,1607,
        1608,3,218,109,0,1608,1609,3,224,112,0,1609,1616,1,0,0,0,1610,1613,
        3,218,109,0,1611,1614,3,222,111,0,1612,1614,3,224,112,0,1613,1611,
        1,0,0,0,1613,1612,1,0,0,0,1614,1616,1,0,0,0,1615,1606,1,0,0,0,1615,
        1610,1,0,0,0,1616,217,1,0,0,0,1617,1619,3,160,80,0,1618,1620,3,228,
        114,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1628,1,0,0,0,1621,
        1622,5,86,0,0,1622,1624,3,160,80,0,1623,1625,3,228,114,0,1624,1623,
        1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1621,1,0,0,0,1627,
        1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,1633,1,0,0,
        0,1630,1628,1,0,0,0,1631,1633,3,238,119,0,1632,1617,1,0,0,0,1632,
        1631,1,0,0,0,1633,219,1,0,0,0,1634,1636,3,160,80,0,1635,1637,3,230,
        115,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1638,1,0,0,0,1638,
        1639,3,224,112,0,1639,221,1,0,0,0,1640,1668,5,82,0,0,1641,1646,5,
        83,0,0,1642,1643,5,82,0,0,1643,1645,5,83,0,0,1644,1642,1,0,0,0,1645,
        1648,1,0,0,0,1646,1644,1,0,0,0,1646,1647,1,0,0,0,1647,1649,1,0,0,
        0,1648,1646,1,0,0,0,1649,1669,3,78,39,0,1650,1651,3,194,97,0,1651,
        1658,5,83,0,0,1652,1653,5,82,0,0,1653,1654,3,194,97,0,1654,1655,
        5,83,0,0,1655,1657,1,0,0,0,1656,1652,1,0,0,0,1657,1660,1,0,0,0,1658,
        1656,1,0,0,0,1658,1659,1,0,0,0,1659,1665,1,0,0,0,1660,1658,1,0,0,
        0,1661,1662,5,82,0,0,1662,1664,5,83,0,0,1663,1661,1,0,0,0,1664,1667,
        1,0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1669,1,0,0,0,1667,
        1665,1,0,0,0,1668,1641,1,0,0,0,1668,1650,1,0,0,0,1669,223,1,0,0,
        0,1670,1672,3,246,123,0,1671,1673,3,32,16,0,1672,1671,1,0,0,0,1672,
        1673,1,0,0,0,1673,225,1,0,0,0,1674,1675,3,232,116,0,1675,1676,3,
        244,122,0,1676,227,1,0,0,0,1677,1678,5,89,0,0,1678,1681,5,88,0,0,
        1679,1681,3,240,120,0,1680,1677,1,0,0,0,1680,1679,1,0,0,0,1681,229,
        1,0,0,0,1682,1683,5,89,0,0,1683,1686,5,88,0,0,1684,1686,3,232,116,
        0,1685,1682,1,0,0,0,1685,1684,1,0,0,0,1686,231,1,0,0,0,1687,1688,
        5,89,0,0,1688,1689,3,234,117,0,1689,1690,5,88,0,0,1690,233,1,0,0,
        0,1691,1696,3,236,118,0,1692,1693,5,85,0,0,1693,1695,3,236,118,0,
        1694,1692,1,0,0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,1697,
        1,0,0,0,1697,235,1,0,0,0,1698,1696,1,0,0,0,1699,1701,3,110,55,0,
        1700,1699,1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,1703,
        1,0,0,0,1703,1707,1,0,0,0,1704,1702,1,0,0,0,1705,1708,3,80,40,0,
        1706,1708,3,238,119,0,1707,1705,1,0,0,0,1707,1706,1,0,0,0,1708,1719,
        1,0,0,0,1709,1711,3,110,55,0,1710,1709,1,0,0,0,1711,1714,1,0,0,0,
        1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1712,
        1,0,0,0,1715,1716,5,82,0,0,1716,1718,5,83,0,0,1717,1712,1,0,0,0,
        1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,237,1,
        0,0,0,1721,1719,1,0,0,0,1722,1723,7,14,0,0,1723,239,1,0,0,0,1724,
        1725,5,89,0,0,1725,1730,3,82,41,0,1726,1727,5,85,0,0,1727,1729,3,
        82,41,0,1728,1726,1,0,0,0,1729,1732,1,0,0,0,1730,1728,1,0,0,0,1730,
        1731,1,0,0,0,1731,1733,1,0,0,0,1732,1730,1,0,0,0,1733,1734,5,88,
        0,0,1734,241,1,0,0,0,1735,1745,3,246,123,0,1736,1738,5,86,0,0,1737,
        1739,3,240,120,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1740,1,
        0,0,0,1740,1742,3,160,80,0,1741,1743,3,246,123,0,1742,1741,1,0,0,
        0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,1744,1735,1,0,0,0,1744,1736,
        1,0,0,0,1745,243,1,0,0,0,1746,1747,5,40,0,0,1747,1752,3,242,121,
        0,1748,1749,3,160,80,0,1749,1750,3,246,123,0,1750,1752,1,0,0,0,1751,
        1746,1,0,0,0,1751,1748,1,0,0,0,1752,245,1,0,0,0,1753,1755,5,78,0,
        0,1754,1756,3,190,95,0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,
        1757,1,0,0,0,1757,1758,5,79,0,0,1758,247,1,0,0,0,219,249,254,260,
        266,271,280,285,292,300,303,310,322,326,331,335,339,343,353,361,
        369,373,380,387,391,394,397,406,412,417,420,426,432,436,444,453,
        460,466,470,482,491,496,502,506,518,529,534,544,552,562,571,582,
        587,596,606,611,620,626,633,638,646,650,652,658,663,667,674,680,
        682,689,694,699,702,704,714,724,729,732,737,746,753,764,770,781,
        791,802,811,816,819,826,836,844,847,850,863,871,876,884,888,892,
        896,900,902,906,912,920,930,939,949,957,971,978,983,989,998,1008,
        1017,1027,1032,1043,1050,1056,1059,1066,1075,1098,1101,1104,1112,
        1116,1124,1130,1141,1150,1155,1168,1174,1181,1194,1203,1212,1218,
        1226,1232,1237,1242,1250,1255,1259,1263,1267,1269,1273,1278,1283,
        1298,1304,1311,1317,1320,1331,1339,1354,1358,1363,1367,1383,1423,
        1429,1442,1447,1450,1452,1458,1465,1477,1486,1493,1496,1500,1518,
        1520,1528,1537,1544,1554,1561,1569,1572,1579,1586,1589,1594,1599,
        1604,1613,1615,1619,1624,1628,1632,1636,1646,1658,1665,1668,1672,
        1680,1685,1696,1702,1707,1712,1719,1730,1738,1742,1744,1751,1755
    ]

class JavaParser ( Parser ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "'module'", "'open'", "'requires'", "'exports'", "'opens'", 
                     "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
                     "'var'", "'yield'", "'record'", "'sealed'", "'permits'", 
                     "'non-sealed'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
                     "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", 
                     "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
                      "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", 
                      "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", 
                      "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
                      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "ENTER", 
                      "COMMENT", "LINE_COMMENT", "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclaration = 3
    RULE_modifier = 4
    RULE_classOrInterfaceModifier = 5
    RULE_variableModifier = 6
    RULE_classDeclaration = 7
    RULE_typeParameters = 8
    RULE_typeParameter = 9
    RULE_typeBound = 10
    RULE_enumDeclaration = 11
    RULE_enumConstants = 12
    RULE_enumConstant = 13
    RULE_enumBodyDeclarations = 14
    RULE_interfaceDeclaration = 15
    RULE_classBody = 16
    RULE_interfaceBody = 17
    RULE_classBodyDeclaration = 18
    RULE_memberDeclaration = 19
    RULE_methodDeclaration = 20
    RULE_methodBody = 21
    RULE_typeTypeOrVoid = 22
    RULE_genericMethodDeclaration = 23
    RULE_genericConstructorDeclaration = 24
    RULE_constructorDeclaration = 25
    RULE_fieldDeclaration = 26
    RULE_interfaceBodyDeclaration = 27
    RULE_interfaceMemberDeclaration = 28
    RULE_constDeclaration = 29
    RULE_constantDeclarator = 30
    RULE_interfaceMethodDeclaration = 31
    RULE_interfaceMethodModifier = 32
    RULE_genericInterfaceMethodDeclaration = 33
    RULE_interfaceCommonBodyDeclaration = 34
    RULE_variableDeclarators = 35
    RULE_variableDeclarator = 36
    RULE_variableDeclaratorId = 37
    RULE_variableInitializer = 38
    RULE_arrayInitializer = 39
    RULE_classOrInterfaceType = 40
    RULE_typeArgument = 41
    RULE_qualifiedNameList = 42
    RULE_formalParameters = 43
    RULE_receiverParameter = 44
    RULE_formalParameterList = 45
    RULE_formalParameter = 46
    RULE_lastFormalParameter = 47
    RULE_lambdaLVTIList = 48
    RULE_lambdaLVTIParameter = 49
    RULE_qualifiedName = 50
    RULE_literal = 51
    RULE_integerLiteral = 52
    RULE_floatLiteral = 53
    RULE_altAnnotationQualifiedName = 54
    RULE_annotation = 55
    RULE_elementValuePairs = 56
    RULE_elementValuePair = 57
    RULE_elementValue = 58
    RULE_elementValueArrayInitializer = 59
    RULE_annotationTypeDeclaration = 60
    RULE_annotationTypeBody = 61
    RULE_annotationTypeElementDeclaration = 62
    RULE_annotationTypeElementRest = 63
    RULE_annotationMethodOrConstantRest = 64
    RULE_annotationMethodRest = 65
    RULE_annotationConstantRest = 66
    RULE_defaultValue = 67
    RULE_moduleDeclaration = 68
    RULE_moduleBody = 69
    RULE_moduleDirective = 70
    RULE_requiresModifier = 71
    RULE_recordDeclaration = 72
    RULE_recordHeader = 73
    RULE_recordComponentList = 74
    RULE_recordComponent = 75
    RULE_recordBody = 76
    RULE_block = 77
    RULE_blockStatement = 78
    RULE_localVariableDeclaration = 79
    RULE_identifier = 80
    RULE_localTypeDeclaration = 81
    RULE_statement = 82
    RULE_catchClause = 83
    RULE_catchType = 84
    RULE_finallyBlock = 85
    RULE_resourceSpecification = 86
    RULE_resources = 87
    RULE_resource = 88
    RULE_switchBlockStatementGroup = 89
    RULE_switchLabel = 90
    RULE_forControl = 91
    RULE_forInit = 92
    RULE_enhancedForControl = 93
    RULE_parExpression = 94
    RULE_expressionList = 95
    RULE_methodCall = 96
    RULE_expression = 97
    RULE_pattern = 98
    RULE_lambdaExpression = 99
    RULE_lambdaParameters = 100
    RULE_lambdaBody = 101
    RULE_primary = 102
    RULE_switchExpression = 103
    RULE_switchLabeledRule = 104
    RULE_guardedPattern = 105
    RULE_switchRuleOutcome = 106
    RULE_classType = 107
    RULE_creator = 108
    RULE_createdName = 109
    RULE_innerCreator = 110
    RULE_arrayCreatorRest = 111
    RULE_classCreatorRest = 112
    RULE_explicitGenericInvocation = 113
    RULE_typeArgumentsOrDiamond = 114
    RULE_nonWildcardTypeArgumentsOrDiamond = 115
    RULE_nonWildcardTypeArguments = 116
    RULE_typeList = 117
    RULE_typeType = 118
    RULE_primitiveType = 119
    RULE_typeArguments = 120
    RULE_superSuffix = 121
    RULE_explicitGenericInvocationSuffix = 122
    RULE_arguments = 123

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                   "variableModifier", "classDeclaration", "typeParameters", 
                   "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
                   "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                   "constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
                   "interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "interfaceMethodModifier", 
                   "genericInterfaceMethodDeclaration", "interfaceCommonBodyDeclaration", 
                   "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
                   "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "receiverParameter", "formalParameterList", "formalParameter", 
                   "lastFormalParameter", "lambdaLVTIList", "lambdaLVTIParameter", 
                   "qualifiedName", "literal", "integerLiteral", "floatLiteral", 
                   "altAnnotationQualifiedName", "annotation", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleBody", "moduleDirective", 
                   "requiresModifier", "recordDeclaration", "recordHeader", 
                   "recordComponentList", "recordComponent", "recordBody", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "identifier", "localTypeDeclaration", "statement", "catchClause", 
                   "catchType", "finallyBlock", "resourceSpecification", 
                   "resources", "resource", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "forInit", "enhancedForControl", 
                   "parExpression", "expressionList", "methodCall", "expression", 
                   "pattern", "lambdaExpression", "lambdaParameters", "lambdaBody", 
                   "primary", "switchExpression", "switchLabeledRule", "guardedPattern", 
                   "switchRuleOutcome", "classType", "creator", "createdName", 
                   "innerCreator", "arrayCreatorRest", "classCreatorRest", 
                   "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    MODULE=51
    OPEN=52
    REQUIRES=53
    EXPORTS=54
    OPENS=55
    TO=56
    USES=57
    PROVIDES=58
    WITH=59
    TRANSITIVE=60
    VAR=61
    YIELD=62
    RECORD=63
    SEALED=64
    PERMITS=65
    NON_SEALED=66
    DECIMAL_LITERAL=67
    HEX_LITERAL=68
    OCT_LITERAL=69
    BINARY_LITERAL=70
    FLOAT_LITERAL=71
    HEX_FLOAT_LITERAL=72
    BOOL_LITERAL=73
    CHAR_LITERAL=74
    STRING_LITERAL=75
    TEXT_BLOCK=76
    NULL_LITERAL=77
    LPAREN=78
    RPAREN=79
    LBRACE=80
    RBRACE=81
    LBRACK=82
    RBRACK=83
    SEMI=84
    COMMA=85
    DOT=86
    ASSIGN=87
    GT=88
    LT=89
    BANG=90
    TILDE=91
    QUESTION=92
    COLON=93
    EQUAL=94
    LE=95
    GE=96
    NOTEQUAL=97
    AND=98
    OR=99
    INC=100
    DEC=101
    ADD=102
    SUB=103
    MUL=104
    DIV=105
    BITAND=106
    BITOR=107
    CARET=108
    MOD=109
    ADD_ASSIGN=110
    SUB_ASSIGN=111
    MUL_ASSIGN=112
    DIV_ASSIGN=113
    AND_ASSIGN=114
    OR_ASSIGN=115
    XOR_ASSIGN=116
    MOD_ASSIGN=117
    LSHIFT_ASSIGN=118
    RSHIFT_ASSIGN=119
    URSHIFT_ASSIGN=120
    ARROW=121
    COLONCOLON=122
    AT=123
    ELLIPSIS=124
    WS=125
    ENTER=126
    COMMENT=127
    LINE_COMMENT=128
    IDENTIFIER=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext,0)


        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 248
                    self.packageDeclaration()


                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.IMPORT:
                    self.state = 251
                    self.importDeclaration()
                    self.state = 256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.CLASS) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                    self.state = 257
                    self.typeDeclaration()
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self.moduleDeclaration()
                self.state = 264
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                self.state = 268
                self.annotation()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(JavaParser.PACKAGE)
            self.state = 275
            self.qualifiedName()
            self.state = 276
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(JavaParser.IMPORT)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.STATIC:
                self.state = 279
                self.match(JavaParser.STATIC)


            self.state = 282
            self.qualifiedName()
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.DOT:
                self.state = 283
                self.match(JavaParser.DOT)
                self.state = 284
                self.match(JavaParser.MUL)


            self.state = 287
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclaration)
        try:
            self.state = 303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.CLASS, JavaParser.ENUM, JavaParser.FINAL, JavaParser.INTERFACE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 289
                        self.classOrInterfaceModifier() 
                    self.state = 294
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.CLASS]:
                    self.state = 295
                    self.classDeclaration()
                    pass
                elif token in [JavaParser.ENUM]:
                    self.state = 296
                    self.enumDeclaration()
                    pass
                elif token in [JavaParser.INTERFACE]:
                    self.state = 297
                    self.interfaceDeclaration()
                    pass
                elif token in [JavaParser.AT]:
                    self.state = 298
                    self.annotationTypeDeclaration()
                    pass
                elif token in [JavaParser.RECORD]:
                    self.state = 299
                    self.recordDeclaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_modifier)
        try:
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.FINAL, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.classOrInterfaceModifier()
                pass
            elif token in [JavaParser.NATIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.match(JavaParser.NATIVE)
                pass
            elif token in [JavaParser.SYNCHRONIZED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 307
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [JavaParser.TRANSIENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 308
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [JavaParser.VOLATILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 309
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.annotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.match(JavaParser.PUBLIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.match(JavaParser.PROTECTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 315
                self.match(JavaParser.PRIVATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 316
                self.match(JavaParser.STATIC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 317
                self.match(JavaParser.ABSTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 318
                self.match(JavaParser.FINAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 319
                self.match(JavaParser.STRICTFP)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 320
                self.match(JavaParser.SEALED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 321
                self.match(JavaParser.NON_SEALED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_variableModifier)
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.FINAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                self.match(JavaParser.FINAL)
                pass
            elif token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(JavaParser.CLASS)
            self.state = 329
            self.identifier()
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 330
                self.typeParameters()


            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 333
                self.match(JavaParser.EXTENDS)
                self.state = 334
                self.typeType()


            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 337
                self.match(JavaParser.IMPLEMENTS)
                self.state = 338
                self.typeList()


            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.PERMITS:
                self.state = 341
                self.match(JavaParser.PERMITS)
                self.state = 342
                self.typeList()


            self.state = 345
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(JavaParser.LT)
            self.state = 348
            self.typeParameter()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 349
                self.match(JavaParser.COMMA)
                self.state = 350
                self.typeParameter()
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 356
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 358
                    self.annotation() 
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

            self.state = 364
            self.identifier()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 365
                self.match(JavaParser.EXTENDS)
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 366
                        self.annotation() 
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                self.state = 372
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.typeType()
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.BITAND:
                self.state = 376
                self.match(JavaParser.BITAND)
                self.state = 377
                self.typeType()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(JavaParser.ENUM)
            self.state = 384
            self.identifier()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 385
                self.match(JavaParser.IMPLEMENTS)
                self.state = 386
                self.typeList()


            self.state = 389
            self.match(JavaParser.LBRACE)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                self.state = 390
                self.enumConstants()


            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.COMMA:
                self.state = 393
                self.match(JavaParser.COMMA)


            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.SEMI:
                self.state = 396
                self.enumBodyDeclarations()


            self.state = 399
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.enumConstant()
            self.state = 406
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 402
                    self.match(JavaParser.COMMA)
                    self.state = 403
                    self.enumConstant() 
                self.state = 408
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 409
                    self.annotation() 
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 415
            self.identifier()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LPAREN:
                self.state = 416
                self.arguments()


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LBRACE:
                self.state = 419
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(JavaParser.SEMI)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 423
                self.classBodyDeclaration()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(JavaParser.INTERFACE)
            self.state = 430
            self.identifier()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 431
                self.typeParameters()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 434
                self.match(JavaParser.EXTENDS)
                self.state = 435
                self.typeList()


            self.state = 438
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(JavaParser.LBRACE)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 441
                self.classBodyDeclaration()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 447
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(JavaParser.LBRACE)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DEFAULT) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 450
                self.interfaceBodyDeclaration()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.STATIC:
                    self.state = 459
                    self.match(JavaParser.STATIC)


                self.state = 462
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 463
                        self.modifier() 
                    self.state = 468
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 469
                self.memberDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_memberDeclaration)
        try:
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.methodDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.genericMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.fieldDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 475
                self.constructorDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 476
                self.genericConstructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.interfaceDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 478
                self.annotationTypeDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 479
                self.classDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 480
                self.enumDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 481
                self.recordDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.typeTypeOrVoid()
            self.state = 485
            self.identifier()
            self.state = 486
            self.formalParameters()
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 487
                self.match(JavaParser.LBRACK)
                self.state = 488
                self.match(JavaParser.RBRACK)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 494
                self.match(JavaParser.THROWS)
                self.state = 495
                self.qualifiedNameList()


            self.state = 498
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodBody)
        try:
            self.state = 502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self.block()
                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)




    def typeTypeOrVoid(self):

        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeTypeOrVoid)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.typeType()
                pass
            elif token in [JavaParser.VOID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.typeParameters()
            self.state = 509
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.typeParameters()
            self.state = 512
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.identifier()
            self.state = 515
            self.formalParameters()
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 516
                self.match(JavaParser.THROWS)
                self.state = 517
                self.qualifiedNameList()


            self.state = 520
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.typeType()
            self.state = 523
            self.variableDeclarators()
            self.state = 524
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.CLASS, JavaParser.DEFAULT, JavaParser.DOUBLE, JavaParser.ENUM, JavaParser.FINAL, JavaParser.FLOAT, JavaParser.INT, JavaParser.INTERFACE, JavaParser.LONG, JavaParser.NATIVE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.SHORT, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.SYNCHRONIZED, JavaParser.TRANSIENT, JavaParser.VOID, JavaParser.VOLATILE, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.LT, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 526
                        self.modifier() 
                    self.state = 531
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                self.state = 532
                self.interfaceMemberDeclaration()
                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.constDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 538
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 539
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 540
                self.annotationTypeDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 541
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 542
                self.enumDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 543
                self.recordDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.typeType()
            self.state = 547
            self.constantDeclarator()
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 548
                self.match(JavaParser.COMMA)
                self.state = 549
                self.constantDeclarator()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 555
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.identifier()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 558
                self.match(JavaParser.LBRACK)
                self.state = 559
                self.match(JavaParser.RBRACK)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 565
            self.match(JavaParser.ASSIGN)
            self.state = 566
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 568
                    self.interfaceMethodModifier() 
                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 574
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)




    def interfaceMethodModifier(self):

        localctx = JavaParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMethodModifier)
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.annotation()
                pass
            elif token in [JavaParser.PUBLIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [JavaParser.ABSTRACT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 579
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [JavaParser.STATIC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 580
                self.match(JavaParser.STATIC)
                pass
            elif token in [JavaParser.STRICTFP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 581
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.DEFAULT) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 584
                self.interfaceMethodModifier()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 590
            self.typeParameters()
            self.state = 591
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceCommonBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceCommonBodyDeclaration" ):
                listener.enterInterfaceCommonBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceCommonBodyDeclaration" ):
                listener.exitInterfaceCommonBodyDeclaration(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.annotation() 
                self.state = 598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 599
            self.typeTypeOrVoid()
            self.state = 600
            self.identifier()
            self.state = 601
            self.formalParameters()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 602
                self.match(JavaParser.LBRACK)
                self.state = 603
                self.match(JavaParser.RBRACK)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 609
                self.match(JavaParser.THROWS)
                self.state = 610
                self.qualifiedNameList()


            self.state = 613
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.variableDeclarator()
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 616
                self.match(JavaParser.COMMA)
                self.state = 617
                self.variableDeclarator()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.variableDeclaratorId()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.ASSIGN:
                self.state = 624
                self.match(JavaParser.ASSIGN)
                self.state = 625
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.identifier()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.LBRACK:
                self.state = 629
                self.match(JavaParser.LBRACK)
                self.state = 630
                self.match(JavaParser.RBRACK)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableInitializer)
        try:
            self.state = 638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.arrayInitializer()
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.NEW, JavaParser.SHORT, JavaParser.SUPER, JavaParser.SWITCH, JavaParser.THIS, JavaParser.VOID, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL, JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL, JavaParser.BOOL_LITERAL, JavaParser.CHAR_LITERAL, JavaParser.STRING_LITERAL, JavaParser.TEXT_BLOCK, JavaParser.NULL_LITERAL, JavaParser.LPAREN, JavaParser.LT, JavaParser.BANG, JavaParser.TILDE, JavaParser.INC, JavaParser.DEC, JavaParser.ADD, JavaParser.SUB, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(JavaParser.LBRACE)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LBRACE - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                self.state = 641
                self.variableInitializer()
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 642
                        self.match(JavaParser.COMMA)
                        self.state = 643
                        self.variableInitializer() 
                    self.state = 648
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COMMA:
                    self.state = 649
                    self.match(JavaParser.COMMA)




            self.state = 654
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.identifier()
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 657
                self.typeArguments()


            self.state = 667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self.match(JavaParser.DOT)
                    self.state = 661
                    self.identifier()
                    self.state = 663
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 662
                        self.typeArguments()

             
                self.state = 669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                    self.state = 671
                    self.annotation()
                    self.state = 676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 677
                self.match(JavaParser.QUESTION)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.EXTENDS or _la==JavaParser.SUPER:
                    self.state = 678
                    _la = self._input.LA(1)
                    if not(_la==JavaParser.EXTENDS or _la==JavaParser.SUPER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 679
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.qualifiedName()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 685
                self.match(JavaParser.COMMA)
                self.state = 686
                self.qualifiedName()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(JavaParser.LPAREN)
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                    self.state = 693
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 696
                self.receiverParameter()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COMMA:
                    self.state = 697
                    self.match(JavaParser.COMMA)
                    self.state = 698
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FINAL - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                    self.state = 701
                    self.formalParameterList()


                pass


            self.state = 706
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)




    def receiverParameter(self):

        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.typeType()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 709
                self.identifier()
                self.state = 710
                self.match(JavaParser.DOT)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 717
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.formalParameter()
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 720
                        self.match(JavaParser.COMMA)
                        self.state = 721
                        self.formalParameter() 
                    self.state = 726
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COMMA:
                    self.state = 727
                    self.match(JavaParser.COMMA)
                    self.state = 728
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 734
                    self.variableModifier() 
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 740
            self.typeType()
            self.state = 741
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)




    def lastFormalParameter(self):

        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 743
                    self.variableModifier() 
                self.state = 748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 749
            self.typeType()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                self.state = 750
                self.annotation()
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 756
            self.match(JavaParser.ELLIPSIS)
            self.state = 757
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)




    def lambdaLVTIList(self):

        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.lambdaLVTIParameter()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 760
                self.match(JavaParser.COMMA)
                self.state = 761
                self.lambdaLVTIParameter()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)




    def lambdaLVTIParameter(self):

        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 767
                    self.variableModifier() 
                self.state = 772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 773
            self.match(JavaParser.VAR)
            self.state = 774
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.identifier()
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 777
                    self.match(JavaParser.DOT)
                    self.state = 778
                    self.identifier() 
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_literal)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.integerLiteral()
                pass
            elif token in [JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.floatLiteral()
                pass
            elif token in [JavaParser.CHAR_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [JavaParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 787
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [JavaParser.BOOL_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 788
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [JavaParser.NULL_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 789
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [JavaParser.TEXT_BLOCK]:
                self.enterOuterAlt(localctx, 7)
                self.state = 790
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)




    def floatLiteral(self):

        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            _la = self._input.LA(1)
            if not(_la==JavaParser.FLOAT_LITERAL or _la==JavaParser.HEX_FLOAT_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 797
                self.identifier()
                self.state = 798
                self.match(JavaParser.DOT)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 805
            self.match(JavaParser.AT)
            self.state = 806
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaParser.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 808
                self.match(JavaParser.AT)
                self.state = 809
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 810
                self.altAnnotationQualifiedName()
                pass


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LPAREN:
                self.state = 813
                self.match(JavaParser.LPAREN)
                self.state = 816
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 814
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 815
                    self.elementValue()


                self.state = 818
                self.match(JavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.elementValuePair()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 822
                self.match(JavaParser.COMMA)
                self.state = 823
                self.elementValuePair()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.identifier()
            self.state = 830
            self.match(JavaParser.ASSIGN)
            self.state = 831
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementValue)
        try:
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(JavaParser.LBRACE)
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LBRACE - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                self.state = 839
                self.elementValue()
                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 840
                        self.match(JavaParser.COMMA)
                        self.state = 841
                        self.elementValue() 
                    self.state = 846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)



            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.COMMA:
                self.state = 849
                self.match(JavaParser.COMMA)


            self.state = 852
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(JavaParser.AT)
            self.state = 855
            self.match(JavaParser.INTERFACE)
            self.state = 856
            self.identifier()
            self.state = 857
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(JavaParser.LBRACE)
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 860
                self.annotationTypeElementDeclaration()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.CLASS, JavaParser.DOUBLE, JavaParser.ENUM, JavaParser.FINAL, JavaParser.FLOAT, JavaParser.INT, JavaParser.INTERFACE, JavaParser.LONG, JavaParser.NATIVE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.SHORT, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.SYNCHRONIZED, JavaParser.TRANSIENT, JavaParser.VOLATILE, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 868
                        self.modifier() 
                    self.state = 873
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 874
                self.annotationTypeElementRest()
                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_annotationTypeElementRest)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.typeType()
                self.state = 879
                self.annotationMethodOrConstantRest()
                self.state = 880
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.classDeclaration()
                self.state = 884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 883
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.interfaceDeclaration()
                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 887
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 890
                self.enumDeclaration()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 894
                self.annotationTypeDeclaration()
                self.state = 896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 895
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 898
                self.recordDeclaration()
                self.state = 900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 899
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.identifier()
            self.state = 909
            self.match(JavaParser.LPAREN)
            self.state = 910
            self.match(JavaParser.RPAREN)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.DEFAULT:
                self.state = 911
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(JavaParser.DEFAULT)
            self.state = 917
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(JavaParser.ModuleBodyContext,0)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)




    def moduleDeclaration(self):

        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.OPEN:
                self.state = 919
                self.match(JavaParser.OPEN)


            self.state = 922
            self.match(JavaParser.MODULE)
            self.state = 923
            self.qualifiedName()
            self.state = 924
            self.moduleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = JavaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(JavaParser.LBRACE)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES))) != 0):
                self.state = 927
                self.moduleDirective()
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 933
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)




    def moduleDirective(self):

        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.REQUIRES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self.match(JavaParser.REQUIRES)
                self.state = 939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 936
                        self.requiresModifier() 
                    self.state = 941
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                self.state = 942
                self.qualifiedName()
                self.state = 943
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.EXPORTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(JavaParser.EXPORTS)
                self.state = 946
                self.qualifiedName()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.TO:
                    self.state = 947
                    self.match(JavaParser.TO)
                    self.state = 948
                    self.qualifiedName()


                self.state = 951
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.OPENS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 953
                self.match(JavaParser.OPENS)
                self.state = 954
                self.qualifiedName()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.TO:
                    self.state = 955
                    self.match(JavaParser.TO)
                    self.state = 956
                    self.qualifiedName()


                self.state = 959
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.USES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 961
                self.match(JavaParser.USES)
                self.state = 962
                self.qualifiedName()
                self.state = 963
                self.match(JavaParser.SEMI)
                pass
            elif token in [JavaParser.PROVIDES]:
                self.enterOuterAlt(localctx, 5)
                self.state = 965
                self.match(JavaParser.PROVIDES)
                self.state = 966
                self.qualifiedName()
                self.state = 967
                self.match(JavaParser.WITH)
                self.state = 968
                self.qualifiedName()
                self.state = 969
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)




    def requiresModifier(self):

        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==JavaParser.STATIC or _la==JavaParser.TRANSITIVE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(JavaParser.RECORD)
            self.state = 976
            self.identifier()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 977
                self.typeParameters()


            self.state = 980
            self.recordHeader()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 981
                self.match(JavaParser.IMPLEMENTS)
                self.state = 982
                self.typeList()


            self.state = 985
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(JavaParser.LPAREN)
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                self.state = 988
                self.recordComponentList()


            self.state = 991
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)




    def recordComponentList(self):

        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_recordComponentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.recordComponent()
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 994
                self.match(JavaParser.COMMA)
                self.state = 995
                self.recordComponent()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.typeType()
            self.state = 1002
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(JavaParser.LBRACE)
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.ENUM) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NATIVE) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOID) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 1005
                self.classBodyDeclaration()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(JavaParser.LBRACE)
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.ASSERT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BREAK) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.CONTINUE) | (1 << JavaParser.DO) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.FOR) | (1 << JavaParser.IF) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NEW) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.RETURN) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SUPER) | (1 << JavaParser.SWITCH) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.THIS) | (1 << JavaParser.THROW) | (1 << JavaParser.TRY) | (1 << JavaParser.VOID) | (1 << JavaParser.WHILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.DECIMAL_LITERAL - 64)) | (1 << (JavaParser.HEX_LITERAL - 64)) | (1 << (JavaParser.OCT_LITERAL - 64)) | (1 << (JavaParser.BINARY_LITERAL - 64)) | (1 << (JavaParser.FLOAT_LITERAL - 64)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 64)) | (1 << (JavaParser.BOOL_LITERAL - 64)) | (1 << (JavaParser.CHAR_LITERAL - 64)) | (1 << (JavaParser.STRING_LITERAL - 64)) | (1 << (JavaParser.TEXT_BLOCK - 64)) | (1 << (JavaParser.NULL_LITERAL - 64)) | (1 << (JavaParser.LPAREN - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.BANG - 64)) | (1 << (JavaParser.TILDE - 64)) | (1 << (JavaParser.INC - 64)) | (1 << (JavaParser.DEC - 64)) | (1 << (JavaParser.ADD - 64)) | (1 << (JavaParser.SUB - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                self.state = 1014
                self.blockStatement()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1020
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockStatement)
        try:
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.localVariableDeclaration()
                self.state = 1023
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.localTypeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1029
                    self.variableModifier() 
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1035
                self.typeType()
                self.state = 1036
                self.variableDeclarators()
                pass

            elif la_ == 2:
                self.state = 1038
                self.match(JavaParser.VAR)
                self.state = 1039
                self.identifier()
                self.state = 1040
                self.match(JavaParser.ASSIGN)
                self.state = 1041
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)




    def localTypeDeclaration(self):

        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_localTypeDeclaration)
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ABSTRACT, JavaParser.CLASS, JavaParser.FINAL, JavaParser.INTERFACE, JavaParser.PRIVATE, JavaParser.PROTECTED, JavaParser.PUBLIC, JavaParser.STATIC, JavaParser.STRICTFP, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.NON_SEALED, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1047
                        self.classOrInterfaceModifier() 
                    self.state = 1052
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 1056
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.CLASS]:
                    self.state = 1053
                    self.classDeclaration()
                    pass
                elif token in [JavaParser.INTERFACE]:
                    self.state = 1054
                    self.interfaceDeclaration()
                    pass
                elif token in [JavaParser.RECORD]:
                    self.state = 1055
                    self.recordDeclaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [JavaParser.SEMI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.match(JavaParser.ASSERT)
                self.state = 1063
                self.expression(0)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.COLON:
                    self.state = 1064
                    self.match(JavaParser.COLON)
                    self.state = 1065
                    self.expression(0)


                self.state = 1068
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1070
                self.match(JavaParser.IF)
                self.state = 1071
                self.parExpression()
                self.state = 1072
                self.statement()
                self.state = 1075
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    self.match(JavaParser.ELSE)
                    self.state = 1074
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1077
                self.match(JavaParser.FOR)
                self.state = 1078
                self.match(JavaParser.LPAREN)
                self.state = 1079
                self.forControl()
                self.state = 1080
                self.match(JavaParser.RPAREN)
                self.state = 1081
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1083
                self.match(JavaParser.WHILE)
                self.state = 1084
                self.parExpression()
                self.state = 1085
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1087
                self.match(JavaParser.DO)
                self.state = 1088
                self.statement()
                self.state = 1089
                self.match(JavaParser.WHILE)
                self.state = 1090
                self.parExpression()
                self.state = 1091
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1093
                self.match(JavaParser.TRY)
                self.state = 1094
                self.block()
                self.state = 1104
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.CATCH]:
                    self.state = 1096 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1095
                        self.catchClause()
                        self.state = 1098 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==JavaParser.CATCH):
                            break

                    self.state = 1101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.FINALLY:
                        self.state = 1100
                        self.finallyBlock()


                    pass
                elif token in [JavaParser.FINALLY]:
                    self.state = 1103
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1106
                self.match(JavaParser.TRY)
                self.state = 1107
                self.resourceSpecification()
                self.state = 1108
                self.block()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.CATCH:
                    self.state = 1109
                    self.catchClause()
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.FINALLY:
                    self.state = 1115
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1118
                self.match(JavaParser.SWITCH)
                self.state = 1119
                self.parExpression()
                self.state = 1120
                self.match(JavaParser.LBRACE)
                self.state = 1124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1121
                        self.switchBlockStatementGroup() 
                    self.state = 1126
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.CASE or _la==JavaParser.DEFAULT:
                    self.state = 1127
                    self.switchLabel()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1133
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1135
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1136
                self.parExpression()
                self.state = 1137
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1139
                self.match(JavaParser.RETURN)
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1140
                    self.expression(0)


                self.state = 1143
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1144
                self.match(JavaParser.THROW)
                self.state = 1145
                self.expression(0)
                self.state = 1146
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1148
                self.match(JavaParser.BREAK)
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.IDENTIFIER:
                    self.state = 1149
                    self.identifier()


                self.state = 1152
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1153
                self.match(JavaParser.CONTINUE)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.IDENTIFIER:
                    self.state = 1154
                    self.identifier()


                self.state = 1157
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1158
                self.match(JavaParser.YIELD)
                self.state = 1159
                self.expression(0)
                self.state = 1160
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1162
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1163
                localctx.statementExpression = self.expression(0)
                self.state = 1164
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1166
                self.switchExpression()
                self.state = 1168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1167
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1170
                localctx.identifierLabel = self.identifier()
                self.state = 1171
                self.match(JavaParser.COLON)
                self.state = 1172
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.match(JavaParser.CATCH)
            self.state = 1177
            self.match(JavaParser.LPAREN)
            self.state = 1181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1178
                    self.variableModifier() 
                self.state = 1183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 1184
            self.catchType()
            self.state = 1185
            self.identifier()
            self.state = 1186
            self.match(JavaParser.RPAREN)
            self.state = 1187
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.qualifiedName()
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.BITOR:
                self.state = 1190
                self.match(JavaParser.BITOR)
                self.state = 1191
                self.qualifiedName()
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(JavaParser.FINALLY)
            self.state = 1198
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(JavaParser.LPAREN)
            self.state = 1201
            self.resources()
            self.state = 1203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.SEMI:
                self.state = 1202
                self.match(JavaParser.SEMI)


            self.state = 1205
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.resource()
            self.state = 1212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1208
                    self.match(JavaParser.SEMI)
                    self.state = 1209
                    self.resource() 
                self.state = 1214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_resource)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1215
                        self.variableModifier() 
                    self.state = 1220
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                self.state = 1226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1221
                    self.classOrInterfaceType()
                    self.state = 1222
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1224
                    self.match(JavaParser.VAR)
                    self.state = 1225
                    self.identifier()
                    pass


                self.state = 1228
                self.match(JavaParser.ASSIGN)
                self.state = 1229
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1231
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1234
                self.switchLabel()
                self.state = 1237 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaParser.CASE or _la==JavaParser.DEFAULT):
                    break

            self.state = 1240 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1239
                self.blockStatement()
                self.state = 1242 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.ASSERT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BREAK) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.CONTINUE) | (1 << JavaParser.DO) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.FOR) | (1 << JavaParser.IF) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NEW) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.RETURN) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SUPER) | (1 << JavaParser.SWITCH) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.THIS) | (1 << JavaParser.THROW) | (1 << JavaParser.TRY) | (1 << JavaParser.VOID) | (1 << JavaParser.WHILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.DECIMAL_LITERAL - 64)) | (1 << (JavaParser.HEX_LITERAL - 64)) | (1 << (JavaParser.OCT_LITERAL - 64)) | (1 << (JavaParser.BINARY_LITERAL - 64)) | (1 << (JavaParser.FLOAT_LITERAL - 64)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 64)) | (1 << (JavaParser.BOOL_LITERAL - 64)) | (1 << (JavaParser.CHAR_LITERAL - 64)) | (1 << (JavaParser.STRING_LITERAL - 64)) | (1 << (JavaParser.TEXT_BLOCK - 64)) | (1 << (JavaParser.NULL_LITERAL - 64)) | (1 << (JavaParser.LPAREN - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.BANG - 64)) | (1 << (JavaParser.TILDE - 64)) | (1 << (JavaParser.INC - 64)) | (1 << (JavaParser.DEC - 64)) | (1 << (JavaParser.ADD - 64)) | (1 << (JavaParser.SUB - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_switchLabel)
        try:
            self.state = 1255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.match(JavaParser.CASE)
                self.state = 1250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1245
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1246
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1247
                    self.typeType()
                    self.state = 1248
                    localctx.varName = self.identifier()
                    pass


                self.state = 1252
                self.match(JavaParser.COLON)
                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1253
                self.match(JavaParser.DEFAULT)
                self.state = 1254
                self.match(JavaParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FINAL - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1258
                    self.forInit()


                self.state = 1261
                self.match(JavaParser.SEMI)
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1262
                    self.expression(0)


                self.state = 1265
                self.match(JavaParser.SEMI)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1266
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_forInit)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1275
                    self.variableModifier() 
                self.state = 1280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1281
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1282
                self.match(JavaParser.VAR)
                pass


            self.state = 1285
            self.variableDeclaratorId()
            self.state = 1286
            self.match(JavaParser.COLON)
            self.state = 1287
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)




    def parExpression(self):

        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(JavaParser.LPAREN)
            self.state = 1290
            self.expression(0)
            self.state = 1291
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.expression(0)
            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1294
                self.match(JavaParser.COMMA)
                self.state = 1295
                self.expression(0)
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)




    def methodCall(self):

        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_methodCall)
        self._la = 0 # Token type
        try:
            self.state = 1320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.identifier()
                self.state = 1302
                self.match(JavaParser.LPAREN)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1303
                    self.expressionList()


                self.state = 1306
                self.match(JavaParser.RPAREN)
                pass
            elif token in [JavaParser.THIS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1308
                self.match(JavaParser.THIS)
                self.state = 1309
                self.match(JavaParser.LPAREN)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1310
                    self.expressionList()


                self.state = 1313
                self.match(JavaParser.RPAREN)
                pass
            elif token in [JavaParser.SUPER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1314
                self.match(JavaParser.SUPER)
                self.state = 1315
                self.match(JavaParser.LPAREN)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                    self.state = 1316
                    self.expressionList()


                self.state = 1319
                self.match(JavaParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)


        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def AND(self):
            return self.getToken(JavaParser.AND, 0)

        def OR(self):
            return self.getToken(JavaParser.OR, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1323
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1324
                self.methodCall()
                pass

            elif la_ == 3:
                self.state = 1325
                self.match(JavaParser.NEW)
                self.state = 1326
                self.creator()
                pass

            elif la_ == 4:
                self.state = 1327
                self.match(JavaParser.LPAREN)
                self.state = 1331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1328
                        self.annotation() 
                    self.state = 1333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                self.state = 1334
                self.typeType()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.BITAND:
                    self.state = 1335
                    self.match(JavaParser.BITAND)
                    self.state = 1336
                    self.typeType()
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1342
                self.match(JavaParser.RPAREN)
                self.state = 1343
                self.expression(22)
                pass

            elif la_ == 5:
                self.state = 1345
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (JavaParser.INC - 100)) | (1 << (JavaParser.DEC - 100)) | (1 << (JavaParser.ADD - 100)) | (1 << (JavaParser.SUB - 100)))) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1346
                self.expression(20)
                pass

            elif la_ == 6:
                self.state = 1347
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==JavaParser.BANG or _la==JavaParser.TILDE):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1348
                self.expression(19)
                pass

            elif la_ == 7:
                self.state = 1349
                self.lambdaExpression()
                pass

            elif la_ == 8:
                self.state = 1350
                self.switchExpression()
                pass

            elif la_ == 9:
                self.state = 1351
                self.typeType()
                self.state = 1352
                self.match(JavaParser.COLONCOLON)
                self.state = 1358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.LT, JavaParser.IDENTIFIER]:
                    self.state = 1354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.LT:
                        self.state = 1353
                        self.typeArguments()


                    self.state = 1356
                    self.identifier()
                    pass
                elif token in [JavaParser.NEW]:
                    self.state = 1357
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.state = 1360
                self.classType()
                self.state = 1361
                self.match(JavaParser.COLONCOLON)
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1362
                    self.typeArguments()


                self.state = 1365
                self.match(JavaParser.NEW)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1450
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1369
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1370
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (JavaParser.MUL - 104)) | (1 << (JavaParser.DIV - 104)) | (1 << (JavaParser.MOD - 104)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1371
                        self.expression(19)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1372
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1373
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParser.ADD or _la==JavaParser.SUB):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1374
                        self.expression(18)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1375
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1383
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                        if la_ == 1:
                            self.state = 1376
                            self.match(JavaParser.LT)
                            self.state = 1377
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1378
                            self.match(JavaParser.GT)
                            self.state = 1379
                            self.match(JavaParser.GT)
                            self.state = 1380
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1381
                            self.match(JavaParser.GT)
                            self.state = 1382
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1385
                        self.expression(17)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1386
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1387
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (JavaParser.GT - 88)) | (1 << (JavaParser.LT - 88)) | (1 << (JavaParser.LE - 88)) | (1 << (JavaParser.GE - 88)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1388
                        self.expression(16)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1389
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1390
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParser.EQUAL or _la==JavaParser.NOTEQUAL):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1391
                        self.expression(14)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1392
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1393
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1394
                        self.expression(13)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1395
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1396
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1397
                        self.expression(12)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1398
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1399
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1400
                        self.expression(11)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1401
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1402
                        localctx.bop = self.match(JavaParser.AND)
                        self.state = 1403
                        self.expression(10)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1404
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1405
                        localctx.bop = self.match(JavaParser.OR)
                        self.state = 1406
                        self.expression(9)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1407
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1408
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1409
                        self.expression(0)
                        self.state = 1410
                        self.match(JavaParser.COLON)
                        self.state = 1411
                        self.expression(7)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1413
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1414
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (JavaParser.ASSIGN - 87)) | (1 << (JavaParser.ADD_ASSIGN - 87)) | (1 << (JavaParser.SUB_ASSIGN - 87)) | (1 << (JavaParser.MUL_ASSIGN - 87)) | (1 << (JavaParser.DIV_ASSIGN - 87)) | (1 << (JavaParser.AND_ASSIGN - 87)) | (1 << (JavaParser.OR_ASSIGN - 87)) | (1 << (JavaParser.XOR_ASSIGN - 87)) | (1 << (JavaParser.MOD_ASSIGN - 87)) | (1 << (JavaParser.LSHIFT_ASSIGN - 87)) | (1 << (JavaParser.RSHIFT_ASSIGN - 87)) | (1 << (JavaParser.URSHIFT_ASSIGN - 87)))) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1415
                        self.expression(6)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1416
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1417
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1429
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                        if la_ == 1:
                            self.state = 1418
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1419
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1420
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1421
                            self.match(JavaParser.NEW)
                            self.state = 1423
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==JavaParser.LT:
                                self.state = 1422
                                self.nonWildcardTypeArguments()


                            self.state = 1425
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1426
                            self.match(JavaParser.SUPER)
                            self.state = 1427
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1428
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1431
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1432
                        self.match(JavaParser.LBRACK)
                        self.state = 1433
                        self.expression(0)
                        self.state = 1434
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1436
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1437
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==JavaParser.INC or _la==JavaParser.DEC):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1438
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1439
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1442
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                        if la_ == 1:
                            self.state = 1440
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1441
                            self.pattern()
                            pass


                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1444
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1445
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1447
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==JavaParser.LT:
                            self.state = 1446
                            self.typeArguments()


                        self.state = 1449
                        self.identifier()
                        pass

             
                self.state = 1454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1455
                    self.variableModifier() 
                self.state = 1460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1461
            self.typeType()
            self.state = 1465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1462
                    self.annotation() 
                self.state = 1467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1468
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.lambdaParameters()
            self.state = 1471
            self.match(JavaParser.ARROW)
            self.state = 1472
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1474
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1475
                self.match(JavaParser.LPAREN)
                self.state = 1477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FINAL - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                    self.state = 1476
                    self.formalParameterList()


                self.state = 1479
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1480
                self.match(JavaParser.LPAREN)
                self.state = 1481
                self.identifier()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.COMMA:
                    self.state = 1482
                    self.match(JavaParser.COMMA)
                    self.state = 1483
                    self.identifier()
                    self.state = 1488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1489
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1491
                self.match(JavaParser.LPAREN)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (JavaParser.FINAL - 18)) | (1 << (JavaParser.MODULE - 18)) | (1 << (JavaParser.OPEN - 18)) | (1 << (JavaParser.REQUIRES - 18)) | (1 << (JavaParser.EXPORTS - 18)) | (1 << (JavaParser.OPENS - 18)) | (1 << (JavaParser.TO - 18)) | (1 << (JavaParser.USES - 18)) | (1 << (JavaParser.PROVIDES - 18)) | (1 << (JavaParser.WITH - 18)) | (1 << (JavaParser.TRANSITIVE - 18)) | (1 << (JavaParser.VAR - 18)) | (1 << (JavaParser.YIELD - 18)) | (1 << (JavaParser.RECORD - 18)) | (1 << (JavaParser.SEALED - 18)) | (1 << (JavaParser.PERMITS - 18)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                    self.state = 1492
                    self.lambdaLVTIList()


                self.state = 1495
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_lambdaBody)
        try:
            self.state = 1500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.NEW, JavaParser.SHORT, JavaParser.SUPER, JavaParser.SWITCH, JavaParser.THIS, JavaParser.VOID, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL, JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL, JavaParser.BOOL_LITERAL, JavaParser.CHAR_LITERAL, JavaParser.STRING_LITERAL, JavaParser.TEXT_BLOCK, JavaParser.NULL_LITERAL, JavaParser.LPAREN, JavaParser.LT, JavaParser.BANG, JavaParser.TILDE, JavaParser.INC, JavaParser.DEC, JavaParser.ADD, JavaParser.SUB, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1498
                self.expression(0)
                pass
            elif token in [JavaParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_primary)
        try:
            self.state = 1520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1502
                self.match(JavaParser.LPAREN)
                self.state = 1503
                self.expression(0)
                self.state = 1504
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1506
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1507
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1508
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1509
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1510
                self.typeTypeOrVoid()
                self.state = 1511
                self.match(JavaParser.DOT)
                self.state = 1512
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1514
                self.nonWildcardTypeArguments()
                self.state = 1518
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.SUPER, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.IDENTIFIER]:
                    self.state = 1515
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [JavaParser.THIS]:
                    self.state = 1516
                    self.match(JavaParser.THIS)
                    self.state = 1517
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(JavaParser.SWITCH)
            self.state = 1523
            self.parExpression()
            self.state = 1524
            self.match(JavaParser.LBRACE)
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.CASE or _la==JavaParser.DEFAULT:
                self.state = 1525
                self.switchLabeledRule()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1531
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)




    def switchLabeledRule(self):

        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1533
                self.match(JavaParser.CASE)
                self.state = 1537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1534
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1535
                    self.match(JavaParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1536
                    self.guardedPattern(0)
                    pass


                self.state = 1539
                _la = self._input.LA(1)
                if not(_la==JavaParser.COLON or _la==JavaParser.ARROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1540
                self.switchRuleOutcome()
                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1541
                self.match(JavaParser.DEFAULT)
                self.state = 1542
                _la = self._input.LA(1)
                if not(_la==JavaParser.COLON or _la==JavaParser.ARROW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1543
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AND)
            else:
                return self.getToken(JavaParser.AND, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 210
        self.enterRecursionRule(localctx, 210, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LPAREN]:
                self.state = 1547
                self.match(JavaParser.LPAREN)
                self.state = 1548
                self.guardedPattern(0)
                self.state = 1549
                self.match(JavaParser.RPAREN)
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FINAL, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.state = 1554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1551
                        self.variableModifier() 
                    self.state = 1556
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                self.state = 1557
                self.typeType()
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1558
                        self.annotation() 
                    self.state = 1563
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                self.state = 1564
                self.identifier()
                self.state = 1569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1565
                        self.match(JavaParser.AND)
                        self.state = 1566
                        self.expression(0) 
                    self.state = 1571
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 1574
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1575
                    self.match(JavaParser.AND)
                    self.state = 1576
                    self.expression(0) 
                self.state = 1581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)




    def switchRuleOutcome(self):

        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1582
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.ASSERT) | (1 << JavaParser.BOOLEAN) | (1 << JavaParser.BREAK) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.CLASS) | (1 << JavaParser.CONTINUE) | (1 << JavaParser.DO) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FINAL) | (1 << JavaParser.FLOAT) | (1 << JavaParser.FOR) | (1 << JavaParser.IF) | (1 << JavaParser.INT) | (1 << JavaParser.INTERFACE) | (1 << JavaParser.LONG) | (1 << JavaParser.NEW) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.RETURN) | (1 << JavaParser.SHORT) | (1 << JavaParser.STATIC) | (1 << JavaParser.STRICTFP) | (1 << JavaParser.SUPER) | (1 << JavaParser.SWITCH) | (1 << JavaParser.SYNCHRONIZED) | (1 << JavaParser.THIS) | (1 << JavaParser.THROW) | (1 << JavaParser.TRY) | (1 << JavaParser.VOID) | (1 << JavaParser.WHILE) | (1 << JavaParser.MODULE) | (1 << JavaParser.OPEN) | (1 << JavaParser.REQUIRES) | (1 << JavaParser.EXPORTS) | (1 << JavaParser.OPENS) | (1 << JavaParser.TO) | (1 << JavaParser.USES) | (1 << JavaParser.PROVIDES) | (1 << JavaParser.WITH) | (1 << JavaParser.TRANSITIVE) | (1 << JavaParser.VAR) | (1 << JavaParser.YIELD) | (1 << JavaParser.RECORD))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (JavaParser.SEALED - 64)) | (1 << (JavaParser.PERMITS - 64)) | (1 << (JavaParser.NON_SEALED - 64)) | (1 << (JavaParser.DECIMAL_LITERAL - 64)) | (1 << (JavaParser.HEX_LITERAL - 64)) | (1 << (JavaParser.OCT_LITERAL - 64)) | (1 << (JavaParser.BINARY_LITERAL - 64)) | (1 << (JavaParser.FLOAT_LITERAL - 64)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 64)) | (1 << (JavaParser.BOOL_LITERAL - 64)) | (1 << (JavaParser.CHAR_LITERAL - 64)) | (1 << (JavaParser.STRING_LITERAL - 64)) | (1 << (JavaParser.TEXT_BLOCK - 64)) | (1 << (JavaParser.NULL_LITERAL - 64)) | (1 << (JavaParser.LPAREN - 64)) | (1 << (JavaParser.LBRACE - 64)) | (1 << (JavaParser.SEMI - 64)) | (1 << (JavaParser.LT - 64)) | (1 << (JavaParser.BANG - 64)) | (1 << (JavaParser.TILDE - 64)) | (1 << (JavaParser.INC - 64)) | (1 << (JavaParser.DEC - 64)) | (1 << (JavaParser.ADD - 64)) | (1 << (JavaParser.SUB - 64)) | (1 << (JavaParser.AT - 64)))) != 0) or _la==JavaParser.IDENTIFIER:
                    self.state = 1583
                    self.blockStatement()
                    self.state = 1588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1591
                self.classOrInterfaceType()
                self.state = 1592
                self.match(JavaParser.DOT)


            self.state = 1599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1596
                    self.annotation() 
                self.state = 1601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

            self.state = 1602
            self.identifier()
            self.state = 1604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 1603
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_creator)
        try:
            self.state = 1615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.nonWildcardTypeArguments()
                self.state = 1607
                self.createdName()
                self.state = 1608
                self.classCreatorRest()
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1610
                self.createdName()
                self.state = 1613
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [JavaParser.LBRACK]:
                    self.state = 1611
                    self.arrayCreatorRest()
                    pass
                elif token in [JavaParser.LPAREN]:
                    self.state = 1612
                    self.classCreatorRest()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1617
                self.identifier()
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1618
                    self.typeArgumentsOrDiamond()


                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.DOT:
                    self.state = 1621
                    self.match(JavaParser.DOT)
                    self.state = 1622
                    self.identifier()
                    self.state = 1624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==JavaParser.LT:
                        self.state = 1623
                        self.typeArgumentsOrDiamond()


                    self.state = 1630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1631
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.identifier()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.LT:
                self.state = 1635
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1638
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(JavaParser.LBRACK)
            self.state = 1668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.RBRACK]:
                self.state = 1641
                self.match(JavaParser.RBRACK)
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.LBRACK:
                    self.state = 1642
                    self.match(JavaParser.LBRACK)
                    self.state = 1643
                    self.match(JavaParser.RBRACK)
                    self.state = 1648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1649
                self.arrayInitializer()
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.NEW, JavaParser.SHORT, JavaParser.SUPER, JavaParser.SWITCH, JavaParser.THIS, JavaParser.VOID, JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.DECIMAL_LITERAL, JavaParser.HEX_LITERAL, JavaParser.OCT_LITERAL, JavaParser.BINARY_LITERAL, JavaParser.FLOAT_LITERAL, JavaParser.HEX_FLOAT_LITERAL, JavaParser.BOOL_LITERAL, JavaParser.CHAR_LITERAL, JavaParser.STRING_LITERAL, JavaParser.TEXT_BLOCK, JavaParser.NULL_LITERAL, JavaParser.LPAREN, JavaParser.LT, JavaParser.BANG, JavaParser.TILDE, JavaParser.INC, JavaParser.DEC, JavaParser.ADD, JavaParser.SUB, JavaParser.AT, JavaParser.IDENTIFIER]:
                self.state = 1650
                self.expression(0)
                self.state = 1651
                self.match(JavaParser.RBRACK)
                self.state = 1658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1652
                        self.match(JavaParser.LBRACK)
                        self.state = 1653
                        self.expression(0)
                        self.state = 1654
                        self.match(JavaParser.RBRACK) 
                    self.state = 1660
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

                self.state = 1665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1661
                        self.match(JavaParser.LBRACK)
                        self.state = 1662
                        self.match(JavaParser.RBRACK) 
                    self.state = 1667
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.arguments()
            self.state = 1672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1671
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.nonWildcardTypeArguments()
            self.state = 1675
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1677
                self.match(JavaParser.LT)
                self.state = 1678
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1682
                self.match(JavaParser.LT)
                self.state = 1683
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1684
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.match(JavaParser.LT)
            self.state = 1688
            self.typeList()
            self.state = 1689
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.typeType()
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1692
                self.match(JavaParser.COMMA)
                self.state = 1693
                self.typeType()
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)




    def typeType(self):

        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1699
                    self.annotation() 
                self.state = 1704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.IDENTIFIER]:
                self.state = 1705
                self.classOrInterfaceType()
                pass
            elif token in [JavaParser.BOOLEAN, JavaParser.BYTE, JavaParser.CHAR, JavaParser.DOUBLE, JavaParser.FLOAT, JavaParser.INT, JavaParser.LONG, JavaParser.SHORT]:
                self.state = 1706
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (JavaParser.MODULE - 51)) | (1 << (JavaParser.OPEN - 51)) | (1 << (JavaParser.REQUIRES - 51)) | (1 << (JavaParser.EXPORTS - 51)) | (1 << (JavaParser.OPENS - 51)) | (1 << (JavaParser.TO - 51)) | (1 << (JavaParser.USES - 51)) | (1 << (JavaParser.PROVIDES - 51)) | (1 << (JavaParser.WITH - 51)) | (1 << (JavaParser.TRANSITIVE - 51)) | (1 << (JavaParser.VAR - 51)) | (1 << (JavaParser.YIELD - 51)) | (1 << (JavaParser.RECORD - 51)) | (1 << (JavaParser.SEALED - 51)) | (1 << (JavaParser.PERMITS - 51)))) != 0) or _la==JavaParser.AT or _la==JavaParser.IDENTIFIER:
                        self.state = 1709
                        self.annotation()
                        self.state = 1714
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1715
                    self.match(JavaParser.LBRACK)
                    self.state = 1716
                    self.match(JavaParser.RBRACK) 
                self.state = 1721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.BOOLEAN) | (1 << JavaParser.BYTE) | (1 << JavaParser.CHAR) | (1 << JavaParser.DOUBLE) | (1 << JavaParser.FLOAT) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.SHORT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.match(JavaParser.LT)
            self.state = 1725
            self.typeArgument()
            self.state = 1730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.COMMA:
                self.state = 1726
                self.match(JavaParser.COMMA)
                self.state = 1727
                self.typeArgument()
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1733
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.arguments()
                pass
            elif token in [JavaParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                self.match(JavaParser.DOT)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.LT:
                    self.state = 1737
                    self.typeArguments()


                self.state = 1740
                self.identifier()
                self.state = 1742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.SUPER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1746
                self.match(JavaParser.SUPER)
                self.state = 1747
                self.superSuffix()
                pass
            elif token in [JavaParser.MODULE, JavaParser.OPEN, JavaParser.REQUIRES, JavaParser.EXPORTS, JavaParser.OPENS, JavaParser.TO, JavaParser.USES, JavaParser.PROVIDES, JavaParser.WITH, JavaParser.TRANSITIVE, JavaParser.VAR, JavaParser.YIELD, JavaParser.RECORD, JavaParser.SEALED, JavaParser.PERMITS, JavaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1748
                self.identifier()
                self.state = 1749
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.match(JavaParser.LPAREN)
            self.state = 1755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & ((1 << (JavaParser.BOOLEAN - 3)) | (1 << (JavaParser.BYTE - 3)) | (1 << (JavaParser.CHAR - 3)) | (1 << (JavaParser.DOUBLE - 3)) | (1 << (JavaParser.FLOAT - 3)) | (1 << (JavaParser.INT - 3)) | (1 << (JavaParser.LONG - 3)) | (1 << (JavaParser.NEW - 3)) | (1 << (JavaParser.SHORT - 3)) | (1 << (JavaParser.SUPER - 3)) | (1 << (JavaParser.SWITCH - 3)) | (1 << (JavaParser.THIS - 3)) | (1 << (JavaParser.VOID - 3)) | (1 << (JavaParser.MODULE - 3)) | (1 << (JavaParser.OPEN - 3)) | (1 << (JavaParser.REQUIRES - 3)) | (1 << (JavaParser.EXPORTS - 3)) | (1 << (JavaParser.OPENS - 3)) | (1 << (JavaParser.TO - 3)) | (1 << (JavaParser.USES - 3)) | (1 << (JavaParser.PROVIDES - 3)) | (1 << (JavaParser.WITH - 3)) | (1 << (JavaParser.TRANSITIVE - 3)) | (1 << (JavaParser.VAR - 3)) | (1 << (JavaParser.YIELD - 3)) | (1 << (JavaParser.RECORD - 3)) | (1 << (JavaParser.SEALED - 3)) | (1 << (JavaParser.PERMITS - 3)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (JavaParser.DECIMAL_LITERAL - 67)) | (1 << (JavaParser.HEX_LITERAL - 67)) | (1 << (JavaParser.OCT_LITERAL - 67)) | (1 << (JavaParser.BINARY_LITERAL - 67)) | (1 << (JavaParser.FLOAT_LITERAL - 67)) | (1 << (JavaParser.HEX_FLOAT_LITERAL - 67)) | (1 << (JavaParser.BOOL_LITERAL - 67)) | (1 << (JavaParser.CHAR_LITERAL - 67)) | (1 << (JavaParser.STRING_LITERAL - 67)) | (1 << (JavaParser.TEXT_BLOCK - 67)) | (1 << (JavaParser.NULL_LITERAL - 67)) | (1 << (JavaParser.LPAREN - 67)) | (1 << (JavaParser.LT - 67)) | (1 << (JavaParser.BANG - 67)) | (1 << (JavaParser.TILDE - 67)) | (1 << (JavaParser.INC - 67)) | (1 << (JavaParser.DEC - 67)) | (1 << (JavaParser.ADD - 67)) | (1 << (JavaParser.SUB - 67)) | (1 << (JavaParser.AT - 67)) | (1 << (JavaParser.IDENTIFIER - 67)))) != 0):
                self.state = 1754
                self.expressionList()


            self.state = 1757
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[97] = self.expression_sempred
        self._predicates[105] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         




